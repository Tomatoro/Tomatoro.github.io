<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tomatoro</title>
  
  <subtitle>与未知的相遇,七分欢喜,三分孤寂。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tomatoro.cn/"/>
  <updated>2023-05-24T02:47:33.038Z</updated>
  <id>http://tomatoro.cn/</id>
  
  <author>
    <name>Tomatoro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客添加Valine评论功能全过程</title>
    <link href="http://tomatoro.cn/archives/736d3b08.html"/>
    <id>http://tomatoro.cn/archives/736d3b08.html</id>
    <published>2020-04-15T16:41:24.000Z</published>
    <updated>2023-05-24T02:47:33.038Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 可用的评论系统有很多，如下：</p><p>来必力：<a href="https://livere.com/" target="_blank" rel="noopener">https://livere.com</a> （需要邮箱注册，加载慢，较卡顿）</p><p>畅言： <a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">http://changyan.kuaizhan.com</a> （安装需要备案号）</p><p>Gitment： <a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">https://github.com/imsun/gitment</a> （加载慢，有 Bug）</p><p>Valine: <a href="https://github.com/xCss/Valine" target="_blank" rel="noopener">https://github.com/xCss/Valine</a> (简约，实用，使用 Leancloud 作为线上数据库）</p><a id="more"></a><h2 id="评论系统配置过程"><a href="#评论系统配置过程" class="headerlink" title="评论系统配置过程"></a>评论系统配置过程</h2><p><code>next</code> 集成了 <code>leancloud</code> 。可以在<code>leancloud</code>进行账号注册。</p><h3 id="1、注册-LeanCloud"><a href="#1、注册-LeanCloud" class="headerlink" title="1、注册 LeanCloud"></a>1、注册 LeanCloud</h3><p>注册地址 <a href="https://leancloud.cn/" target="_blank" rel="noopener">https://leancloud.cn/</a></p><h3 id="2、配置-LeanCloud"><a href="#2、配置-LeanCloud" class="headerlink" title="2、配置 LeanCloud"></a>2、配置 LeanCloud</h3><p>创建一个新的应用</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdujcpvt75j30mn082mxb.jpg" alt></p><p>随便取个名字，自己看着取吧</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdujctj3ysj30za0cwdgn.jpg" alt></p><p>应用创建完成，点开配置按钮</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdujcxa92qj30zx07kaae.jpg" alt></p><p>点击<code>设置</code> &gt; <code>应用Key</code> 复制 App ID 和 App Key  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdujd0mj33j30yl0edq43.jpg" alt></p><p>点击<code>设置</code> &gt; <code>安全中心</code> 把自己博客网址添加到安全中心，保证数据的调用安全。  </p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gdujd4a7sej30qn0n3wgb.jpg" alt></p><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><h4 id="One"><a href="#One" class="headerlink" title="One"></a>One</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gduintqm3gj30ng016glv.jpg" alt="image-20200415160934042"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Valine</span><br><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  el: &apos;vcomments&apos;</span><br><span class="line">  appId: &apos;&apos; # 你的appId</span><br><span class="line">  appKey: &apos;&apos; # 你的appKey</span><br><span class="line">  notify: true # 邮箱推送</span><br><span class="line">  verify: true</span><br><span class="line">  avatar: &apos;mp&apos;</span><br><span class="line">  pageSize: &apos;10&apos;</span><br><span class="line">  placeholder: &apos;请输入...&apos;</span><br></pre></td></tr></table></figure><h4 id="Two"><a href="#Two" class="headerlink" title="Two"></a>Two</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gduin17mcpj30iu012q39.jpg" alt="image-20200415160845401"></p><p>找到你的主题中放评论的位置加上valine这一行就可以</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gduioeva58j30oo08ywik.jpg" alt="image-20200415161007516"></p><h4 id="Three"><a href="#Three" class="headerlink" title="Three"></a>Three</h4><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gduiphphs6j30l401c74q.jpg" alt="image-20200415161109883"></p><p>这个文件里填上这些内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.valine.enable) &#123; %&gt;</span><br><span class="line">&lt;div class=&quot;vcomments&quot; id=&quot;&lt;%- theme.valine.el %&gt;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;%- js(&apos;https://unpkg.com/valine/dist/Valine.min.js&apos;) %&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">new Valine(&#123;</span><br><span class="line">el: &apos;#&lt;%- theme.valine.el %&gt;&apos;,</span><br><span class="line">appId: &apos;&lt;%- theme.valine.appId %&gt;&apos;,</span><br><span class="line">appKey: &apos;&lt;%- theme.valine.appKey %&gt;&apos;,</span><br><span class="line">notify: &apos;&lt;%- theme.valine.notify %&gt;&apos;,</span><br><span class="line">verify: &apos;&lt;%- theme.valine.verify %&gt;&apos;,</span><br><span class="line">avatar: &apos;&lt;%- theme.valine.avatar %&gt;&apos;,</span><br><span class="line">pageSize: &apos;&lt;%- theme.valine.pageSize %&gt;&apos;,</span><br><span class="line">placeholder: &apos;&lt;%- theme.valine.placeholder %&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>####Four</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gduirlfwozj30kk01at92.jpg" alt="image-20200415161311403"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.vcomments</span><br><span class="line">    margin-top: 3rem</span><br></pre></td></tr></table></figure><p>####Five</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gduiqiiydjj30gw014wet.jpg" alt="image-20200415161208972"></p><p>引入上面这个css文件</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gduiqqkl6tj30dc040jtg.jpg" alt="image-20200415161222135"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 可用的评论系统有很多，如下：&lt;/p&gt;
&lt;p&gt;来必力：&lt;a href=&quot;https://livere.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://livere.com&lt;/a&gt; （需要邮箱注册，加载慢，较卡顿）&lt;/p&gt;
&lt;p&gt;畅言： &lt;a href=&quot;http://changyan.kuaizhan.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://changyan.kuaizhan.com&lt;/a&gt; （安装需要备案号）&lt;/p&gt;
&lt;p&gt;Gitment： &lt;a href=&quot;https://github.com/imsun/gitment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/imsun/gitment&lt;/a&gt; （加载慢，有 Bug）&lt;/p&gt;
&lt;p&gt;Valine: &lt;a href=&quot;https://github.com/xCss/Valine&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/xCss/Valine&lt;/a&gt; (简约，实用，使用 Leancloud 作为线上数据库）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="http://tomatoro.cn/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>前端所有跨域方式实现原理及详解</title>
    <link href="http://tomatoro.cn/archives/5d00c70d.html"/>
    <id>http://tomatoro.cn/archives/5d00c70d.html</id>
    <published>2020-04-09T00:00:00.000Z</published>
    <updated>2023-05-24T02:47:33.046Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 跨域是我们在项目中经常遇到的，前后端数据交互经常碰到请求跨域，首先我们来想一下为什么会有跨域这个词的出现？本文带你来探讨一下以下几个问题：</p></blockquote><ul><li>跨域是什么？</li><li>为什么要跨域？</li><li>跨域的几种方式？</li><li>…</li></ul><a id="more"></a> <h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域?"></a>什么是跨域?</h2><p><code>跨域</code>是指的浏览器不能执行其它网站的脚本，它是由浏览器的<code>同源策略</code>造成，是浏览器对 JavaScript 实施的安全限制。</p><p><code>跨域</code>实际上指从一个域的网页去请求另一个域的资源，比如：从 <code>http://www.baidu.com</code> 网站去请求<code>http://www.google.com</code> 网站的资源。</p><h2 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略?"></a>什么是同源策略?</h2><p><code>同源策略</code> 指的是 <strong>域名</strong>，<strong>协议</strong>，<strong>端口</strong> 三者都相同~<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9ozezn0j30e503ya9y.jpg" alt></p><h3 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源?"></a>什么是同源?</h3><p>要知道<code>URL</code>由<strong>协议</strong>，<strong>域名</strong>，<strong>端口</strong>以及<strong>路径</strong>组成，若两个<code>URL</code>的协议、域名和端口相同，则表示他们同源。<br>相反，只要<strong>协议</strong>，<strong>域名</strong>，<strong>端口</strong>有任何一个的不同，就被当作是跨域。</p><h3 id="限制同源策略内容"><a href="#限制同源策略内容" class="headerlink" title="限制同源策略内容"></a>限制同源策略内容</h3><ul><li>Cookie、LocalStorage、IndexedDB 等存储性内容</li><li>DOM 节点</li><li>Ajax 请求发送后，结果被浏览器拦截了</li></ul><h3 id="允许跨域加载资源"><a href="#允许跨域加载资源" class="headerlink" title="允许跨域加载资源"></a>允许跨域加载资源</h3><p>这下边三个含有 <code>src</code> 标签的是允许跨域加载资源的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">XXX</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">XXX</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">XXX</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="跨域的场景"><a href="#跨域的场景" class="headerlink" title="跨域的场景"></a>跨域的场景</h2><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9uvqr9gj30if08waa5.jpg" alt></p><h2 id="九种跨域解决方案"><a href="#九种跨域解决方案" class="headerlink" title="九种跨域解决方案"></a>九种跨域解决方案</h2><ul><li>jsonp</li><li>cors</li><li>postMessage</li><li>document.domain</li><li>window.name</li><li>location.hash</li><li>https-proxy</li><li>nginx</li><li>websocket</li></ul><h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2><h3 id="什么是-jsonp"><a href="#什么是-jsonp" class="headerlink" title="什么是 jsonp"></a>什么是 jsonp</h3><p><code>jsonp</code>全称是<code>JSON with Padding</code>，是为了解决跨域请求资源而产生的解决方案，是一种依赖开发人员创造出的一种非官方跨域数据交互协议。</p><h3 id="Jsonp-的原理"><a href="#Jsonp-的原理" class="headerlink" title="Jsonp 的原理"></a>Jsonp 的原理</h3><ol><li>利用 script 标签的 src 属性来实现跨域</li><li>通过将前端方法作为参数传递到服务器端，然后由服务器端注入参数之后再返回，实现服务器端向客户端通信</li><li>由于使用 script 标签的 src 属性，因此只支持 get 方法</li></ol><h3 id="Jsonp-和-Ajax-对比"><a href="#Jsonp-和-Ajax-对比" class="headerlink" title="Jsonp 和 Ajax 对比"></a>Jsonp 和 Ajax 对比</h3><ol><li>Jsonp 和 Ajax 相同, 都是客户端向服务器端发送请求，从服务器端获取数据的方式</li><li>Ajax 属于同源策略</li><li>Jsonp 属于非同源策略 (跨域请求)</li></ol><h3 id="Jsonp-的优缺点"><a href="#Jsonp-的优缺点" class="headerlink" title="Jsonp 的优缺点"></a>Jsonp 的优缺点</h3><p>优点：</p><ol><li>它不像 XMLHttpRequest 对象实现的 Ajax 请求那样受到同源策略的限制，JSONP 可以跨越同源策略</li><li>它的兼容性更好，在更加古老的浏览器中都可以运行，不需要 XMLHttpRequest 或 ActiveX 的支持</li><li>在请求完毕后可以通过调用 callback 的方式回传结果</li></ol><p>缺点：</p><ol><li>它只支持 GET 请求而不支持 POST 等其它类型的 HTTP 请求</li><li>它只支持跨域 HTTP 请求这种情况，不能解决不同域的两个页面之间如何进行 JavaScript 调用的问题</li><li>jsonp 在调用失败的时候不会返回各种 HTTP 状态码</li><li>缺点是安全性，万一假如提供 jsonp 的服务存在页面注入漏洞，即它返回的 javascript 的内容被人控制的</li></ol><h3 id="Jsonp-的实现流程"><a href="#Jsonp-的实现流程" class="headerlink" title="Jsonp 的实现流程"></a>Jsonp 的实现流程</h3><ol><li>声明一个回调函数，把函数名 (show) 当做参数值</li><li>要传递给跨域请求的数据的服务器，函数形参为要获取目标数据</li><li>创建一个 script 标签，把那个跨域的 API 数据接口地址，赋值给 script 的 src，还要在这个地址中向服务器传递该函数名</li><li>服务器接收到请求后，需要进行处理：把传递的参数名和它需要的数据拼接成一个字符串</li><li>最后服务器把准备的数据通过 HTTP 协议返回给客户端，客户端再调用执行之前声明的回调函数 (show), 对返回的数据进行操作</li></ol><p>具体代码实现如下：</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123;url,params,cb&#125;</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>[cb]=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">                    resolve(data);</span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.body.removeChild(script);</span></span><br><span class="line">                &#125;</span><br><span class="line">                params=&#123;...params,cb&#125;</span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> arrs = [];</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> params)&#123;</span></span><br><span class="line"><span class="javascript">                    arrs.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arrs.join(<span class="string">'&amp;'</span>)&#125;</span>`</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.body.appendChild(script)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        jsonp(&#123;</span><br><span class="line"><span class="javascript">            url:<span class="string">'http://localhost:3000/say'</span>,</span></span><br><span class="line"><span class="javascript">            params:&#123;<span class="attr">wd</span>:<span class="string">'早上好'</span>&#125;,</span></span><br><span class="line"><span class="javascript">            cb:<span class="string">'show'</span></span></span><br><span class="line"><span class="javascript">        &#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data)</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>serve.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/say'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;wd,cb&#125; = req.query;</span><br><span class="line">    <span class="built_in">console</span>.log(wd);</span><br><span class="line">    res.end(<span class="string">`<span class="subst">$&#123;cb&#125;</span>('晚上好')`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>： 需要安装<code>npm install express</code>, 然后在终端里面输入<code>node serve.js</code>, 再把<code>index.html</code>在浏览器上边<code>console</code>栏查看返回结果</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9p5y7jyj30bn038745.jpg" alt></p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9panaaej30az011q2q.jpg" alt></p><h3 id="JQuery-的-jsonp-跨域请求"><a href="#JQuery-的-jsonp-跨域请求" class="headerlink" title="JQuery 的 jsonp 跨域请求"></a>JQuery 的 jsonp 跨域请求</h3><p>如果从 <code>192.168.19.1</code>发<code>ajax</code>请求到 <code>192.168.19.6</code> 会产生跨域问题, 利用<code>jquery</code>的<code>jsonp</code>参数可轻松这个问题。</p><p><strong>注意</strong>：Jsonp 都是 GET 和异步请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">           type: <span class="string">"GET"</span>,</span><br><span class="line">           url: <span class="string">'http://192.168.19.6:8080/jsgd/bill.jsp?userCode=?&amp;date='</span>+ <span class="keyword">new</span> <span class="built_in">Date</span>(), </span><br><span class="line">           dataType:<span class="string">"jsonp"</span>,</span><br><span class="line">                jsonp:<span class="string">"jsonpcallback"</span>,</span><br><span class="line">          success: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'#callcenter'</span>).html(msg.text);</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h2><h3 id="什么是-cors"><a href="#什么是-cors" class="headerlink" title="什么是 cors"></a>什么是 cors</h3><p><code>cors</code>全称 “跨域资源共享”(Cross-origin resource sharing), 是一种 ajax 跨域请求资源的方式。</p><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><ol><li>cors 需要浏览器和服务器同时支持，才可以实现跨域的请求</li><li>这个方法几乎所有的浏览器都支持，但是 ie 必须是 10 以上</li><li>ie8 和 9 需要通过 XDomainRequest 来实现</li></ol><h3 id="请求类型"><a href="#请求类型" class="headerlink" title="请求类型"></a>请求类型</h3><p>cors 分为<code>简单请求</code>和<code>复杂请求</code>两类</p><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>请求方式使用下列方法之一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET</span><br><span class="line">HEAD</span><br><span class="line">POST</span><br></pre></td></tr></table></figure><p>Content-Type 的值仅限于下列三者之一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text/plain</span><br><span class="line">multipart/form-data</span><br><span class="line">application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：对于简单的请求，浏览器会直接发送 cors 请求，具体来说就是在 header 中加入 origin 请求头字段。在响应头回服务器设置相关的 cors 请求, 响应头字段为允许跨域请求的源。请求时浏览器在请求头的 Origin 中说明请求的源，服务器收到后发现允许该源跨域请求，则会成功返回。<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9pewjbpj309w0a075k.jpg" alt></p><h3 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h3><p>使用了下面任一 HTTP 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT</span><br><span class="line">DELETE</span><br><span class="line">CONNECT</span><br><span class="line">OPTIONS</span><br><span class="line">TRACE</span><br><span class="line">PATCH</span><br></pre></td></tr></table></figure><p>Content-Type 的值不属于下列之一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">application/x-www-form-urlencoded</span><br><span class="line">multipart/form-data</span><br><span class="line">text/plain</span><br></pre></td></tr></table></figure><p>当符合复杂请求的条件时，浏览器会自动先发送一个 options 请求。如果发现浏览器支持该请求，则会将真正的请求发送到后端。如果浏览器发现服务端不支持该请求，则会在控制台抛出错误。</p><h3 id="cors-字段介绍"><a href="#cors-字段介绍" class="headerlink" title="cors 字段介绍"></a>cors 字段介绍</h3><ul><li><p>Access-Control-Allow-Methods</p><p>这个字段是必要的，它的值是逗号分割的一个字符串，表明服务器支持的所有跨域请求的方式</p></li><li><p>Access-Control-Allow-Headers</p><p>如果浏览器请求包括这个字段，则这个字段也是必须的，它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在 “预检 “ 中请求的字段</p><ul><li><p>Access-Control-Allow-Credentials</p><p>这个字段与简单请求时的含义相同</p></li></ul></li><li><p>Access-Control-Max-Age</p><p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是 20 天（1728000 秒），即允许缓存该条回应 1728000 秒（即 20 天），在此期间，不用发出另一条预检请求</p></li></ul><h3 id="流程实现"><a href="#流程实现" class="headerlink" title="流程实现"></a>流程实现</h3><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    hello</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>serve.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>以当前这个作为静态文件目录，先要在终端里面<code>node serve.js</code>服务器打开，访问<code>localhost:3000</code>就可以把 hello 显示出来。<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9pjlbv9j307p05h0sm.jpg" alt><br>这是一个完整的复杂请求例子：</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiaoming'</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span></span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, <span class="string">'http://localhost:4000/getData'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">'name'</span>, <span class="string">'xiaoming'</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status === <span class="number">304</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.response)</span><br><span class="line">    <span class="comment">//得到响应头，后台需设置Access-Control-Expose-Headers</span></span><br><span class="line">    <span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">'name'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><p>serve.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>serve2.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"><span class="keyword">let</span> whitList = [<span class="string">'http://localhost:3000'</span>]</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> origin = req.headers.origin</span><br><span class="line">  <span class="keyword">if</span> (whitList.includes(origin)) &#123;</span><br><span class="line">    </span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, origin)</span><br><span class="line">    </span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    </span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line">    </span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>)</span><br><span class="line">    </span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>)</span><br><span class="line">    </span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">      res.end() </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.put(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.setHeader(<span class="string">'name'</span>, <span class="string">'ming'</span>) </span><br><span class="line">  res.end(<span class="string">'早上好'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.end(<span class="string">'早上好'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(express.static(__dirname))</span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9po8fd6j309w06h748.jpg" alt></p><h3 id="Cors-与-Jsonp-比较"><a href="#Cors-与-Jsonp-比较" class="headerlink" title="Cors 与 Jsonp 比较"></a>Cors 与 Jsonp 比较</h3><ol><li>cors 比 Jsonp 更强大</li><li>Jsonp 只支持 Get 请求，cors 支持所有类型的 HTTP 请求</li><li>使用 cors，可以使用 XMLHttpRequest 发起请求和获取数据，比 Jsonp 有更好的错误处理</li><li>Jsonp 的优势在于支持老式浏览器和可以向 cors 的网络请求数据</li><li>cors 与 Jsonp 相比，更方便可靠</li></ol><h2 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h2><h3 id="什么是-postMessage"><a href="#什么是-postMessage" class="headerlink" title="什么是 postMessage"></a>什么是 postMessage</h3><p><code>postMessage</code>方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。</p><h3 id="postMessage-语法"><a href="#postMessage-语法" class="headerlink" title="postMessage 语法"></a>postMessage 语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">otherWindow.postMessage(message, targetOrigin, [transfer])</span><br></pre></td></tr></table></figure><ul><li>otherWindow：其它窗口 (目标窗口) 的引用，比如 iframe 的 contentWindow 属性、执行 window.open 返回的窗口对象、或者是命名过或数值索引的 window.frames</li><li>message：将要发送到其他 window 的数据，这个数据会自动被序列化，数据格式也不受限制 (字符串，对象都可以)</li><li>targetOrigin：目标窗口的源，可以是字符串 * 表示无限制，或 URL, 需要协议端口号和主机都匹配才会发送</li><li>transfer(可选)：是一串和 message 同时传递的 Tranferable 对象，这些对象的所有权将 被转移给消息接收方，而发送一方将不再保有所有权</li></ul><h3 id="兼容性-1"><a href="#兼容性-1" class="headerlink" title="兼容性"></a>兼容性</h3><p>高级浏览器<code>Internet Explorer 8+</code>, <code>chrome</code>，<code>Firefox</code> , <code>Opera</code> 和 <code>Safari</code> 都将支持这个功能</p><h3 id="流程实现-1"><a href="#流程实现-1" class="headerlink" title="流程实现"></a>流程实现</h3><blockquote><p>a.html 向 b.html 传递 “早上好”，然后 a.html 传回 “今天天气真好”</p></blockquote><p>a.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">"http://localhost:4000/b.html"</span> frameborder=<span class="string">"0"</span> id=<span class="string">"frame"</span> onload=<span class="string">"load()"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> frame = <span class="built_in">document</span>.getElementById(<span class="string">'frame'</span>);</span><br><span class="line">    frame.contentWindow.postMessage(<span class="string">'早上好'</span>,<span class="string">'http://localhost:4000'</span>);</span><br><span class="line">    <span class="built_in">window</span>.onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>b.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e.data);</span></span><br><span class="line"><span class="javascript">        e.source.postMessage(<span class="string">'今天天气不错'</span>,e.origin)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>b.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9ptd0yhj308n05y0sn.jpg" alt></p><h2 id="Window-name"><a href="#Window-name" class="headerlink" title="Window.name"></a>Window.name</h2><h3 id="什么是-Window-name"><a href="#什么是-Window-name" class="headerlink" title="什么是 Window.name"></a>什么是 Window.name</h3><p><code>window.name</code> 是一个 <code>window</code> 对象的内置属性，<code>name</code> 属性可以设置或返回存放窗口的名称的一个字符串。</p><h3 id="该属性的特征"><a href="#该属性的特征" class="headerlink" title="该属性的特征"></a>该属性的特征</h3><p>在页面在浏览器端展示的时候，我们总能在控制台拿到一个全局变量 window，该变量有一个 name 属性，有以下的特征：</p><ol><li>每个窗口都有独立的 window.name 与之对应</li><li>在一个窗口的生命周期中 (被关闭前)，窗口载入的所有页面同时共享一个 window.name，每个页面 window.name 都有读写的权限</li><li>window.name 一直存在与当前窗口，即使是新的页面载入也不会改变 window.name 的值</li><li>window.name 可以存储不超过 2M 的数据，数据个数按需自定义</li></ol><h3 id="流程实现-2"><a href="#流程实现-2" class="headerlink" title="流程实现"></a>流程实现</h3><ol><li>a.html 和 b.html 是同域 <code>http://localhost:3000</code></li><li>c.html 是独立的 <code>http://localhost:4000</code></li><li>a 获取 c 的数据</li><li>a 先引用 c</li><li>c 把值放到<code>window.name</code>, 把 a 引用的地址改为 b</li></ol><p>a.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/c.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">onload</span>=<span class="string">"load()"</span> <span class="attr">id</span>=<span class="string">"iframe"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> first = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(first)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">            iframe.src=<span class="string">"http://localhost:3000/b.html"</span>;</span></span><br><span class="line"><span class="javascript">            first = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(iframe.contentWindow.name)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>b.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    早上好</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.name=<span class="string">'今天天气不错'</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>b.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9pxl93ij30a805ht8n.jpg" alt></p><h2 id="location-hash"><a href="#location-hash" class="headerlink" title="location.hash"></a>location.hash</h2><h3 id="什么是-location-hash"><a href="#什么是-location-hash" class="headerlink" title="什么是 location.hash"></a>什么是 location.hash</h3><p><code>location</code>是<code>javascript</code>里面的内置对象，如<code>location.href</code>就管理页面的 url，用<code>loaction.href=url</code>就可以直接将页面重定向 url, 而<code>location.hash</code>则可以用来获取或设置页面的标签值，hash 属性是一个可读可写的字符串，该字符串是 URL 的<strong>锚部分</strong> (从 #号开始的部分)</p><h3 id="location-hash-的简单应用"><a href="#location-hash-的简单应用" class="headerlink" title="location.hash 的简单应用"></a>location.hash 的简单应用</h3><p><code>#</code>的含义</p><p><code>#</code>代表网页中的位置，其右边的字符，就是该位置的标识符，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:</span><br></pre></td></tr></table></figure><p>就是代表 index.html 的 drafts 位置，浏览器读取这个 URL 后，会自动将 print 位置滚动至可视区域</p><p>HTTP 请求不包括#</p><p>#是用来指导浏览器的动作的，对服务器端完全无用，所以，HTTP 请求中不包括#<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:</span><br></pre></td></tr></table></figure><p>浏览器实际发出的请求是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET/index.html HTTP/1.1</span><br><span class="line">Host:www.juejin.com</span><br></pre></td></tr></table></figure><p>可以看到，只是请求的 index.html, 没有 #drafts 部分</p><p><code>#</code>后的字符</p><p>在第一个 #出现的任何字符，都会被浏览器解读为位置标识符，这意味着，这些字符不会被发送到服务器端</p><p>改变 #不触发网页重构</p><p>单单改变 #后的部分，浏览器只会滚动到相应的位置，不会重新加载网页</p><p>改变 #会改变浏览器的访问历史</p><p>每一次改变 #后的部分，都会在浏览器的访问历史中增加一个记录，使用 “后退” 按钮，就可以回到上一个位置</p><p>读取 #值</p><p>window.location.hash 这个属性可读可写。读取时，可以用来判断网页状态是否改变；写入时，则会在不重载网页的前提下，创造一条访问历史记录</p><p>onhashchange 事件</p><p>当 #值发生变化时，就会触发这个事件。IE8+、Firefox 3.6+、Chrome 5+、Safari 4.0 + 支持该事件</p><p>Google 抓取 #的机制</p><p>默认情况下，Google 的网络忽视 URL 的 #部分</p><h3 id="流程实现-3"><a href="#流程实现-3" class="headerlink" title="流程实现"></a>流程实现</h3><p>路径后面的 hash 值可以用来通信。目的：<code>a.html</code> 想访问 <code>c.html</code>跨域相互通信。</p><ol><li>a.html 给 c.html 传一个 hash 值, 需要通过中间的 b.html 来实现</li><li>c.html 收到 hash 值后 c.html 把 hash 值传递给 b.html</li><li>b.html 将结果放到 a.html 的 hash 值中</li></ol><p>a.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/c.html#goodmorning"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(location.hash);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.parent.parent.location.hash = location.hash </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>c.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(location.hash);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">    iframe.src = <span class="string">'http://localhost:3000/b.html#goodevening'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(iframe);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>b.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9q5lnbij30a805ht8n.jpg" alt></p><h2 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h2><h3 id="什么是-domain"><a href="#什么是-domain" class="headerlink" title="什么是 domain"></a>什么是 domain</h3><p>主要用于主域相同的域之间的数据通信，<strong>注意</strong> 仅限主域相同，子域不同的跨域应用场景。</p><p><strong>实现的原理</strong>：两个页面都通过 js 强制设置 <code>document.domain</code> 为基础主域，就实现了同域</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>这个方法只能用于二级域名相同的情况下, 比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">www.baidu.com</span><br><span class="line">hhh.baidu.com</span><br></pre></td></tr></table></figure><p>这就适用于 domain 方法</p><h3 id="流程实现-4"><a href="#流程实现-4" class="headerlink" title="流程实现"></a>流程实现</h3><p>a.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://b.ming.cn:3000/b.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">onload</span>=<span class="string">"load()"</span> <span class="attr">id</span>=<span class="string">"frame"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.domain = <span class="string">'ming.cn'</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(frame.contentWindow.a);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    早上好啊</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.domain = <span class="string">'ming.cn'</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> a = <span class="number">99999</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server run at 3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>b.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">4000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server run at 4000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9q99td0j30f5081weh.jpg" alt><br>这个就可以通过 <a href="http://a.ming.cn/" target="_blank" rel="noopener">http://a.ming.cn</a>:3000/a.html 获取到页面 <a href="http://a.ming.cn/" target="_blank" rel="noopener">http://a.ming.cn</a>:3000/b.htm 中的 a 的值 99999</p><p><strong>注意</strong>：这里我把我电脑上边的 hosts 修改了一下，不然不能出来效果<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9qeg3pjj30jt0633yr.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9qhpf9tj309o02hdfn.jpg" alt></p><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><h3 id="什么是-WebSocket"><a href="#什么是-WebSocket" class="headerlink" title="什么是 WebSocket"></a>什么是 WebSocket</h3><p><code>WebSocket</code>是一种网络通信协议，它实现了浏览器与服务器全双工通信，同时允许跨域通讯。原生 WebSocket API 使用起来不太方便，我们使用<code>Socket.io</code>，它很好地封装了 webSocket 接口，提供了更简单、灵活的接口，也对不支持 webSocket 的浏览器提供了向下兼容。</p><h3 id="WebSocket-如何工作"><a href="#WebSocket-如何工作" class="headerlink" title="WebSocket 如何工作"></a>WebSocket 如何工作</h3><p>Web 浏览器和服务器都必须实现 WebSockets 协议来建立和维护连接。由于 WebSockets 连接长期存在，与典型的 HTTP 连接不同，对服务器有重要的影响。</p><p><strong>注意</strong>：基于多线程或多进程的服务器无法适用于<code>WebSockets</code>，因为它旨在打开连接，尽可能快地处理请求，然后关闭连接。任何实际的<code>WebSockets</code>服务器端实现都需要一个异步服务器。</p><h3 id="流程实现-5"><a href="#流程实现-5" class="headerlink" title="流程实现"></a>流程实现</h3><p>a.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:3000'</span>);</span></span><br><span class="line"><span class="javascript">    socket.onopen=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        socket.send(<span class="string">'早上好啊'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e.data);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">let</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>)</span><br><span class="line"><span class="keyword">let</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123;<span class="attr">port</span>:<span class="number">3000</span>&#125;)</span><br><span class="line">wss.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">ws</span>)</span>&#123;</span><br><span class="line">    ws.on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        ws.send(<span class="string">'今天天气真好'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9qq808yj30b501l0sj.jpg" alt><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdn9qucxmyj30hg063jre.jpg" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是整理的一些跨域的方法，我觉得一般用 cors,jsonp 等常见的方法就可以了，不过遇到了一些特殊情况，我们也要做到有很多方法是可以选择的，相信这篇文字会对大家有帮助!</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 跨域是我们在项目中经常遇到的，前后端数据交互经常碰到请求跨域，首先我们来想一下为什么会有跨域这个词的出现？本文带你来探讨一下以下几个问题：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;跨域是什么？&lt;/li&gt;
&lt;li&gt;为什么要跨域？&lt;/li&gt;
&lt;li&gt;跨域的几种方式？&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://tomatoro.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>2019Nian终总结</title>
    <link href="http://tomatoro.cn/archives/1e218812.html"/>
    <id>http://tomatoro.cn/archives/1e218812.html</id>
    <published>2020-01-01T00:00:00.000Z</published>
    <updated>2023-05-24T02:47:33.034Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在某些时候，需要将自己以往的经历归零，因为有些东西是放在一定条件下它才成立，不要总是说过去怎样怎样，你拥有的资源、所处的环境不同，那么结果就是不一样</p></blockquote><a id="more"></a><p>2019 Nian琐事</p><ul><li>北京——杭州——武汉</li><li>结束了异地恋</li><li>养了一只猫</li><li>终于有了自己的Mac</li><li>去宜昌旅游了一次</li><li>发现了一个笔记神器<a href="https://tomatoro.space" target="_blank" rel="noopener">Notion</a> (记录了36篇文章)</li><li>用Hexo搭建了自己的<a href="https://tomatoro.cn">博客</a> (更新了17篇文章)</li><li>将博客进行了SEO</li><li>技术栈<ul><li>HTML5</li><li>CSS3</li><li>JavaScript</li><li>ES5/ES6</li><li>Vue</li><li>Node</li><li>Nginx</li><li>Less/Sass</li><li>JQuery</li><li>小程序</li><li>博客搭建</li><li>域名代理</li><li>HTTP</li></ul></li></ul><p>2020 Nian规划</p><ul><li>要明确的知道自己想要的是什么</li><li>不要对自己设限</li><li>博客坚持持续更新</li><li>GitHub贡献开源</li><li>进大厂</li><li>技术向上</li><li>技术栈<ul><li>TypeScript</li><li>React</li><li>React-Native</li><li>Angular</li><li>Webpack</li><li>Serverless</li><li>Fultter</li></ul></li></ul><p>📍<strong>北京</strong></p><div style="display: flex;">  <img src="https://tva1.sinaimg.cn/large/006tNbRwly1gai3tz5w4fj30sg0sgn0x.jpg" style="zoom:25%;">  <img src="https://tva1.sinaimg.cn/large/006tNbRwly1gai6y18e1rj30sg0sgwl0.jpg" style="zoom:25%;"><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gai6zneua8j30sg0sgaek.jpg" style="zoom:25%;"></div><p>📍<strong>杭州日月同辉广场</strong></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gai74wqq11j318g0dnq6s.jpg" alt></p><p>📍<strong>武汉长江大桥</strong></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gai74elg8ej30sg0lbad3.jpg" alt></p><p>🐱<strong>我的猫叫奶粉AND人生中第一台Mac</strong></p><div style="display: flex;">  <img src="https://tva1.sinaimg.cn/large/006tNbRwly1gai75xt8vej30lc0sgq9g.jpg" style="zoom:40%;">  <img src="https://tva1.sinaimg.cn/large/006tNbRwly1gai76d2zduj30sg0n4wi3.jpg" style="zoom:40%;"></div><p>🏡<strong>武汉的家</strong></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gai76z6pu3j31bl0cr78b.jpg" alt></p><p>💑<strong>哈哈哈</strong></p><div style="display: flex;">  <img src="https://tva1.sinaimg.cn/large/006tNbRwly1gai71aqsvgj30lc0sgafj.jpg" style="zoom:25%;">  <img src="https://tva1.sinaimg.cn/large/006tNbRwly1gai7358l5gj30lc0sg0yt.jpg" style="zoom:25%;"></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在某些时候，需要将自己以往的经历归零，因为有些东西是放在一定条件下它才成立，不要总是说过去怎样怎样，你拥有的资源、所处的环境不同，那么结果就是不一样&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue程序化的事件监听器</title>
    <link href="http://tomatoro.cn/archives/a85e4219.html"/>
    <id>http://tomatoro.cn/archives/a85e4219.html</id>
    <published>2019-12-31T15:00:55.000Z</published>
    <updated>2023-05-24T02:47:33.042Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>某些第三方插件必须在当前组件卸载后清除该实例（比如说百度的富文本框UEditor 如果不清除再次在下个组件使用时会有bug， 类似于小程序的语音实例，必须离开页面的时候销毁当前语音实例，不然语音会一直播放）</p></blockquote><a id="more"></a><p>方案1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;            </span><br><span class="line">    <span class="keyword">return</span> &#123;                              </span><br><span class="line">        timer: <span class="literal">null</span>  <span class="comment">// 定时器名称          </span></span><br><span class="line">    &#125;        </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>然后这样使用定时器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.timer = setIterval (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 某些操作</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>最后在beforeDestroy()生命周期内清除定时器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timer);        </span><br><span class="line">    <span class="keyword">this</span>.timer = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次方案有两点不好的地方，引用尤大的话来说就是：</p><h3 id="1-它需要在这个组件实例中保存这个数据timer，这是多余的。"><a href="#1-它需要在这个组件实例中保存这个数据timer，这是多余的。" class="headerlink" title="(1)它需要在这个组件实例中保存这个数据timer，这是多余的。"></a>(1)它需要在这个组件实例中保存这个数据timer，这是多余的。</h3><h3 id="2-我们的建立定时器代码独立于我们的清理代码（定时器需要卸载页面的时候卸载），这使得我们比较难于程序化的清理我们建立的所有东西（意思是执行代码和清除代码不在一起）。"><a href="#2-我们的建立定时器代码独立于我们的清理代码（定时器需要卸载页面的时候卸载），这使得我们比较难于程序化的清理我们建立的所有东西（意思是执行代码和清除代码不在一起）。" class="headerlink" title="(2)我们的建立定时器代码独立于我们的清理代码（定时器需要卸载页面的时候卸载），这使得我们比较难于程序化的清理我们建立的所有东西（意思是执行代码和清除代码不在一起）。"></a>(2)我们的建立定时器代码独立于我们的清理代码（定时器需要卸载页面的时候卸载），这使得我们比较难于程序化的清理我们建立的所有东西（意思是执行代码和清除代码不在一起）。</h3><p>方案2： 该方法是通过$once这个事件侦听器器在定义完定时器之后的位置来清除定时器。以下是完整代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span>&#123;                    </span><br><span class="line">      <span class="comment">// 某些定时器操作                </span></span><br><span class="line">  &#125;, <span class="number">500</span>);            </span><br><span class="line">  <span class="comment">// 通过$once来监听定时器，在beforeDestroy钩子可以被清除。</span></span><br><span class="line">  <span class="keyword">this</span>.$once(<span class="string">'hook:beforeDestroy'</span>, () =&gt; &#123;            </span><br><span class="line">      clearInterval(timer);                                    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单来说就是把所有创建实例和需要销毁的实例代码放在一起了，放在一起而已-创建实例和销毁实例-……"><a href="#简单来说就是把所有创建实例和需要销毁的实例代码放在一起了，放在一起而已-创建实例和销毁实例-……" class="headerlink" title="简单来说就是把所有创建实例和需要销毁的实例代码放在一起了，放在一起而已(创建实例和销毁实例)…….."></a>简单来说就是把所有创建实例和需要销毁的实例代码放在一起了，放在一起而已(创建实例和销毁实例)……..</h3><h3 id="甚至可以在一个页面开启多个这种创建实例和销毁实例"><a href="#甚至可以在一个页面开启多个这种创建实例和销毁实例" class="headerlink" title="甚至可以在一个页面开启多个这种创建实例和销毁实例"></a>甚至可以在一个页面开启多个这种创建实例和销毁实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.attachDatepicker(<span class="string">'startDateInput'</span>)</span><br><span class="line">  <span class="keyword">this</span>.attachDatepicker(<span class="string">'endDateInput'</span>)</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  attachDatepicker: <span class="function"><span class="keyword">function</span> (<span class="params">refName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> picker = <span class="keyword">new</span> Pikaday(&#123;</span><br><span class="line">      field: <span class="keyword">this</span>.$refs[refName],</span><br><span class="line">      format: <span class="string">'YYYY-MM-DD'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.$once(<span class="string">'hook:beforeDestroy'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      picker.destroy()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综合来说，我们更推荐使用方案2，使得代码可读性更强，一目了然。如果不清楚<code>$once、$on、$off</code>的使用，这里送上官网的地址教程，<a href="https://link.juejin.im/?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fcomponents-edge-cases.html%23%25E7%25A8%258B%25E5%25BA%258F%25E5%258C%2596%25E7%259A%2584%25E4%25BA%258B%25E4%25BB%25B6%25E4%25BE%25A6%25E5%2590%25AC%25E5%2599%25A8" target="_blank" rel="noopener">在程序化的事件侦听器那里</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;某些第三方插件必须在当前组件卸载后清除该实例（比如说百度的富文本框UEditor 如果不清除再次在下个组件使用时会有bug， 类似于小程序的语音实例，必须离开页面的时候销毁当前语音实例，不然语音会一直播放）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://tomatoro.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue inheritAttrs, $attrs,$listeners 详解</title>
    <link href="http://tomatoro.cn/archives/d95d5814.html"/>
    <id>http://tomatoro.cn/archives/d95d5814.html</id>
    <published>2019-12-30T10:00:55.000Z</published>
    <updated>2023-05-24T02:47:33.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、vm-attrs简介"><a href="#1、vm-attrs简介" class="headerlink" title="1、vm.$attrs简介"></a>1、vm.$attrs简介</h3><p>首先我们来看下vue官方对vm.$attrs的介绍： 包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件——在创建更高层次的组件时非常有用。 猛一看有点看不明白….</p><a id="more"></a><h3 id="2、场景介绍"><a href="#2、场景介绍" class="headerlink" title="2、场景介绍"></a>2、场景介绍</h3><p>vue中一个比较令人烦恼的事情是属性只能从父组件传递给子组件。这也就意味着当你想向嵌套层级比较深组件数据传递，只能由父组件传递给子组件，子组件再传递给孙子组件…像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent-component</span> <span class="attr">:passdown</span>=<span class="string">"passdown"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">:passdown</span>=<span class="string">"passdown"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">grand-child-component</span> <span class="attr">:passdown</span>=<span class="string">"passdown"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure><pre><code>就这样一层一层的往下传递passdown这个变量，最后才能用{{passdown}}。</code></pre><p>假如我们需要传递的属性只有1,2个还行，但是如果我们要传递的有几个或者10来个的情况，这会是什么样的场景，我们会在每个组件不停的props，每个必须写很多遍。有没有其它方便的写法？有，通过vuex的父子组件通信，的确这个是一个方法，但是还有其它的方法，这个就是我们要说的。通过inheritAttrs选项，以及实例属性$attrs</p><h3 id="3、实例："><a href="#3、实例：" class="headerlink" title="3、实例："></a>3、实例：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mytest</span>  <span class="attr">:title</span>=<span class="string">"title"</span> <span class="attr">:massgae</span>=<span class="string">"massgae"</span>&gt;</span><span class="tag">&lt;/<span class="name">mytest</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'home'</span>,</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      title:<span class="string">'title1111'</span>,</span></span><br><span class="line"><span class="javascript">      massgae:<span class="string">'message111'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line"><span class="javascript">    <span class="string">'mytest'</span>:&#123;</span></span><br><span class="line"><span class="xml">      template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>这是个h1标题&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="javascript">      props:[<span class="string">'title'</span>],</span></span><br><span class="line">      data()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">          mag:<span class="string">'111'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      created:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs)<span class="comment">//注意这里</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上边的代码，我们在组件里只是用了title这个属性，massgae属性我么是没有用的，那么下浏览器渲染出来是什么样呢？如下图：</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaej2f413aj30yh0jsk68.jpg" alt></p><p>我们看到：组件内未被注册的属性将作为普通html元素属性被渲染，如果想让属性能够向下传递，即使prop组件没有被使用，你也需要在组件上注册。这样做会使组件预期功能变得模糊不清，同时也难以维护组件的DRY。在Vue2.4.0,可以在组件定义中添加inheritAttrs：false，组件将不会把未被注册的props呈现为普通的HTML属性。但是在组件里我们可以通过其$attrs可以获取到没有使用的注册属性，如果需要，我们在这也可以往下继续传递。</p><p>如果我们在子组件里设置 inheritAttrs: false：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">components:&#123;</span><br><span class="line">    <span class="string">'mytest'</span>:&#123;</span><br><span class="line">      template:<span class="string">`&lt;div&gt;这是个h1标题&#123;&#123;title&#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">      props:[<span class="string">'title'</span>],</span><br><span class="line">      inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">      data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">          mag:<span class="string">'111'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      created:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs)<span class="comment">//注意这里</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>渲染效果如下：</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaeix9msvcj30vp0nkwp6.jpg" alt></p><h3 id="补充：说一下-attrs的使用"><a href="#补充：说一下-attrs的使用" class="headerlink" title="补充：说一下$attrs的使用"></a>补充：说一下$attrs的使用</h3><p>有一个页面由父组件，子组件，孙子组件构成，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding:50px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">childcom</span> <span class="attr">:name</span>=<span class="string">"name"</span> <span class="attr">:age</span>=<span class="string">"age"</span> <span class="attr">:sex</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">childcom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">'name'</span>:<span class="string">'test'</span>,</span></span><br><span class="line">    props:[],</span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">'name'</span>:<span class="string">'张三'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'age'</span>:<span class="string">'30'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'sex'</span>:<span class="string">'男'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line"><span class="javascript">        <span class="string">'childcom'</span>:&#123;</span></span><br><span class="line"><span class="xml">            template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">grandcom</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span>&gt;</span><span class="tag">&lt;/<span class="name">grandcom</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="javascript">            props:[<span class="string">'name'</span>],</span></span><br><span class="line">            components: &#123;</span><br><span class="line"><span class="javascript">                <span class="string">'grandcom'</span>:&#123;</span></span><br><span class="line"><span class="xml">                    template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$attrs&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码在页面的效果是如下图</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaeiz7ort3j30x00emwl0.jpg" alt></p><p>如果attrs被绑定在子组件childcom上后，我们就可以在孙子组件grandcom里获取到this.$attrs的值。这个的值是父组件中传递下来的props（除了子组件childcom组件中props声明的）。</p><p>记住孙子组件grandcom里获取到this.$attrs的值是除了子组件childcom声明的元素！记住是除了子组件childcom声明的元素！例如上面的代码我在子组件childcom组件的props里声明了name，那么我在孙子组件grandcom里获取到的$attrs就不包含name属性，那么this.$attrs = { ‘age’:’30’, ‘sex’:’男’}。</p><h3 id="补充：说一下-attrs的优势到底在哪"><a href="#补充：说一下-attrs的优势到底在哪" class="headerlink" title="补充：说一下$attrs的优势到底在哪"></a>补充：说一下$attrs的优势到底在哪</h3><p>假如我们要做一个页面，有父组件，子组件，孙子组件，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">childcom</span>&gt;</span><span class="tag">&lt;/<span class="name">childcom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">'name'</span>:<span class="string">'test'</span>,</span></span><br><span class="line">    props:[],</span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">'name'</span>:<span class="string">'张三'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'age'</span>:<span class="string">'30'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'sex'</span>:<span class="string">'男'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line"><span class="javascript">        <span class="string">'childcom'</span>:&#123;</span></span><br><span class="line"><span class="xml">            template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">grandcom</span>&gt;</span><span class="tag">&lt;/<span class="name">grandcom</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line">            components: &#123;</span><br><span class="line"><span class="javascript">                <span class="string">'grandcom'</span>:&#123;</span></span><br><span class="line"><span class="xml">                    template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>我是孙子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上代码，假如我想在子组件想获取到父组件的name属性值，在孙子组件获取父组件的age属性值，用props的话就必须在父组件把name和age的值通过props传递到子组件，子组件在通过props把age的值传递到孙子组件，到这里看明白了吧，孙子组件需要的age在子组件里没有用到，但是为了能让孙子组件获取到，你必须从父组件 传到子组件，在在子组件传递到孙子组件。</p><p>但是用$attrs就不用那么麻烦，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">childcom</span> <span class="attr">:name</span>=<span class="string">"name"</span> <span class="attr">:age</span>=<span class="string">"age"</span> <span class="attr">:sex</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">childcom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">'name'</span>:<span class="string">'test'</span>,</span></span><br><span class="line">    props:[],</span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">'name'</span>:<span class="string">'张三'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'age'</span>:<span class="string">'30'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'sex'</span>:<span class="string">'男'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line"><span class="javascript">        <span class="string">'childcom'</span>:&#123;</span></span><br><span class="line"><span class="javascript">            props:[<span class="string">'name'</span>],</span></span><br><span class="line"><span class="xml">            template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件   &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">grandcom</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span>&gt;</span><span class="tag">&lt;/<span class="name">grandcom</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line">            components: &#123;</span><br><span class="line"><span class="javascript">                <span class="string">'grandcom'</span>:&#123;</span></span><br><span class="line"><span class="xml">                    template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>我是孙子组件&#123;&#123;$attrs.age&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件绑定了”$attrs”，孙子组件就能获取到除了name属性外所有由父组件传递下来的属性。如果孙子组件也想获取到name属性那么，在绑定个name如下，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">grandcom</span> <span class="attr">v-bind</span>=<span class="string">"$attrs"</span> <span class="attr">:name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">grandcom</span>&gt;</span></span><br></pre></td></tr></table></figure><p>细细体会下是不是这个道理。实在不行的话敲一敲代码自己试验下，你就会豁然开朗。</p><h3 id="inheritAttrs属性"><a href="#inheritAttrs属性" class="headerlink" title="inheritAttrs属性"></a>inheritAttrs属性</h3><p>关于inheritAttrs这个属性跟获取到$attrs的值没有关系，inheritAttrs通常在编写基础组件时候会用到。官网原话：默认情况下父作用域的不被认作 props 的特性绑定 (attribute bindings) 将会“回退”且作为普通的 HTML 特性应用在子组件的根元素上。当撰写包裹一个目标元素或另一个组件的组件时，这可能不会总是符合预期行为。通过设置 inheritAttrs 到 false，这些默认行为将会被去掉。而通过 (同样是 2.4 新增的) 实例属性 $attrs 可以让这些特性生效，且可以通过 v-bind 显性的绑定到非根元素上。</p><p>注意：这个选项不影响 class 和 style 绑定。</p><p>在Vue2.4.0之前版本，组件内未被注册的属性将作为普通html元素属性被渲染。</p><p>inheritAttrs到底有啥用？到底用在哪里？看下边代码，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childcom</span> <span class="attr">:name</span>=<span class="string">"name"</span> <span class="attr">:age</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">childcom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">'name'</span>:<span class="string">'test'</span>,</span></span><br><span class="line">    props:[],</span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">'name'</span>:<span class="string">'张三'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'age'</span>:<span class="string">'30'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'sex'</span>:<span class="string">'男'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line"><span class="javascript">        <span class="string">'childcom'</span>:&#123;</span></span><br><span class="line"><span class="javascript">            props:[<span class="string">'name'</span>,<span class="string">'age'</span>],</span></span><br><span class="line"><span class="xml">            template:`<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">style</span>=<span class="string">"border:1px solid blue"</span>&gt;</span>`,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码你觉得input上会怎么显示？ 父组件传递了type=”text”，子组件里input 上type=”number”，那渲染到页面会是什么样？渲染图如下：</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaeizzxvc2j30ww0b90xy.jpg" alt></p><p>看到没，父组件传递的type=”text”覆盖了input 上type=”number”，这岂不是把我的input数据类型都给改变了，这岂不是有问题，这不是我想要的！！！！看到这里明白了吗？回头去体会下上面官网的原话！！！</p><p>需求：我需要input 上type=”number”类型不变，但是我还是要取到父组件的type=”text”的值，那么代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childcom</span> <span class="attr">:name</span>=<span class="string">"name"</span> <span class="attr">:age</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">childcom</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">'name'</span>:<span class="string">'test'</span>,</span></span><br><span class="line">    props:[],</span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">'name'</span>:<span class="string">'张三'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'age'</span>:<span class="string">'30'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'sex'</span>:<span class="string">'男'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line"><span class="javascript">        <span class="string">'childcom'</span>:&#123;</span></span><br><span class="line"><span class="javascript">            inheritAttrs:<span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            props:[<span class="string">'name'</span>,<span class="string">'age'</span>],</span></span><br><span class="line"><span class="xml">            template:`<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">style</span>=<span class="string">"border:1px solid blue"</span>&gt;</span>`,</span></span><br><span class="line">            created () &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs.type)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面渲染图如下：</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaej067t7zj30x30digt6.jpg" alt></p><p>到这，我想大家都明白了inheritAttrs的作用了吧。默认情况下vue会把父作用域的不被认作 props 的特性绑定 且作为普通的 HTML 特性应用在子组件的根元素上。绑定就绑定，显示就显示，没啥大不了的，但是怕就怕遇到一些特殊的，就比如上面的input的情况，这个时候inheritAttrs:false的作用就出来啦。</p><h3 id="listeners"><a href="#listeners" class="headerlink" title="$listeners"></a>$listeners</h3><p>父组件-子组件-孙子组件，，，，现在我要你在孙子组件里改变父组件的值，怎么改？有很多方法啦，但是$listeners给我们提供了一个新的思路。话不多说，直接上代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">childcom</span> <span class="attr">:name</span>=<span class="string">"name"</span> <span class="attr">:age</span>=<span class="string">"age"</span> <span class="attr">:sex</span>=<span class="string">"sex"</span> @<span class="attr">testChangeName</span>=<span class="string">"changeName"</span>&gt;</span><span class="tag">&lt;/<span class="name">childcom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">'name'</span>:<span class="string">'test'</span>,</span></span><br><span class="line">    props:[],</span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">'name'</span>:<span class="string">'张三'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'age'</span>:<span class="string">'30'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">'sex'</span>:<span class="string">'男'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line"><span class="javascript">        <span class="string">'childcom'</span>:&#123;</span></span><br><span class="line"><span class="javascript">            props:[<span class="string">'name'</span>],</span></span><br><span class="line"><span class="xml">            template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件   &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">grandcom</span> **<span class="attr">v-bind</span>=<span class="string">"$attrs"</span> <span class="attr">v-on</span>=<span class="string">"$listeners"</span>**&gt;</span><span class="tag">&lt;/<span class="name">grandcom</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line">           </span><br><span class="line">            components: &#123;</span><br><span class="line"><span class="javascript">                <span class="string">'grandcom'</span>:&#123;</span></span><br><span class="line"><span class="xml">                    template:`<span class="tag">&lt;<span class="name">div</span>&gt;</span>我是孙子组件-------<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"grandChangeName"</span>&gt;</span>改变名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line">                    methods:&#123;</span><br><span class="line">                        grandChangeName()&#123;</span><br><span class="line"><span class="javascript">                           <span class="keyword">this</span>.$emit(<span class="string">'testChangeName'</span>,<span class="string">'kkkkkk'</span>)</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        changeName(val)&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.name = val</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面渲染如下</p><p>$listeners可以让你在孙子组件触发变yeye组件的事件，是不是很方便</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaej0i6g60j30wv0fmgv6.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、vm-attrs简介&quot;&gt;&lt;a href=&quot;#1、vm-attrs简介&quot; class=&quot;headerlink&quot; title=&quot;1、vm.$attrs简介&quot;&gt;&lt;/a&gt;1、vm.$attrs简介&lt;/h3&gt;&lt;p&gt;首先我们来看下vue官方对vm.$attrs的介绍： 包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件——在创建更高层次的组件时非常有用。 猛一看有点看不明白….&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://tomatoro.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue的组件通信之Provide与Inject机制</title>
    <link href="http://tomatoro.cn/archives/f29baeb3.html"/>
    <id>http://tomatoro.cn/archives/f29baeb3.html</id>
    <published>2019-12-28T16:33:43.000Z</published>
    <updated>2023-05-24T02:47:33.042Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vue中父组件到子组件的通信主要由子组件的props属性实现。但是在一些情况下，父组件无法直接向子组件的props传值。比如子组件通过父组件的slot进入父组件，父组件根本不知道子组件是谁，更不用说用子组件的props了。这时应该怎么办呢？Vue在2.2.0版本引入了provide与inject，正好适合处理这一情况。</p></blockquote><a id="more"></a><h3 id="什么是provide与inject"><a href="#什么是provide与inject" class="headerlink" title="什么是provide与inject"></a>什么是provide与inject</h3><p>用文档的话说：</p><p>provide/inject需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。如果你熟悉 React，这与 React 的上下文特性很相似。</p><p>这就是说从父组件的provide属性传入一个对象，子组件（或者是孙组件，只要是子级组件）可以用inject属性接收父组件的provide属性。比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;c1 message=<span class="string">"hello world"</span>&gt;</span><br><span class="line">        &lt;c2&gt;<span class="xml"><span class="tag">&lt;/<span class="name">c2</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/c1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// c1.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"c1"</span>&gt;</span><br><span class="line">    &lt;slot&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">'message'</span>],</span><br><span class="line">  provide () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="keyword">this</span>.message</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ c2.vue</span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div id="c2"&gt;</span></span><br><span class="line"><span class="regexp">      &#123;&#123; message &#125;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  inject: ['message']</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>上面的main组件会被渲染为:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"c1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>= <span class="string">"c2"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，c1组件在不清楚子组件是什么的情况下，将它的props中的message传给了c2组件。在这里c1组件就像是一个数据源一样，为子组件提供数据。但是，c1组件提供的数据仅在c1的子孙组件中可见，因此可以算作是有作用域限定的数据源。</p><p>父到子孙组件方向的数据流<br>父到子孙组件方向是provide/inject机制设计时的数据流方向。我们可能会猜想，在父组件中更改provide的值，子组件会响应式的发生改变。但是注意到文档中话。</p><p>提示：provide和inject绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。</p><p>这意味着，如果provide的值不是可监听对象时，在父组件中更改provide的值，子组件不会发生任何变化。比如模板仍然为上面那个例子的模板，message的值是一个props属性，不是可监听对象，如果我们在c1的mounted钩子函数里改变message的值。如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c1.vue</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'Opps, it would not be rendered'</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>子组件不会响应修改后的值。</p><p>但是如果provide的值是一个可监听对象呢？请看一下例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// c1.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="string">'hello world'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  provide () &#123;</span><br><span class="line">    messageData: <span class="keyword">this</span>.$data</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.message = <span class="string">'I can show in c2.'</span></span><br><span class="line">    &#125;, <span class="number">10000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ c2.vue</span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div id="c2"&gt;</span></span><br><span class="line"><span class="regexp">    &#123;&#123; messageData.message &#125;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  inject: ['messageData']</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>此时在c1挂载10s后，子组件将会显示I can show in c2。为什么呢？c2中messageData实际上就是c1实例的this.$data。而this.$data上有message的响应式getter与setter。所以c2的视图会被message的dep收集，因此在c1中更新message，c2的视图也会更新。</p><p>纵观整个过程，provide/inject机制是非响应式的，即provide与inject之间没有绑定。具体的值是在子组件初始化过程中决定的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>provide/inject提供了一种新的组件间通信的方法。它允许父组件向子孙组件间进行跨层级的数据分发。但是provide/inject是非响应式的，如果要子孙组件根据父组件的值进行改变，provide/inject机制不是一个好的选择。此时可以使用Vuex来管理状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Vue中父组件到子组件的通信主要由子组件的props属性实现。但是在一些情况下，父组件无法直接向子组件的props传值。比如子组件通过父组件的slot进入父组件，父组件根本不知道子组件是谁，更不用说用子组件的props了。这时应该怎么办呢？Vue在2.2.0版本引入了provide与inject，正好适合处理这一情况。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://tomatoro.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>再读一次Vue官方文档带来的意外惊喜</title>
    <link href="http://tomatoro.cn/archives/3a867b5d.html"/>
    <id>http://tomatoro.cn/archives/3a867b5d.html</id>
    <published>2019-12-26T14:20:38.000Z</published>
    <updated>2023-05-24T02:47:33.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>Vue目前算是我用的时间最长的一个框架了,但是最近总是在想,我真的了解Vue了吗,还是说,仅仅只是会用它而已了呢.<br>最开始用Vue的时候只是草草看了一遍文档,细节之处并未关心,以至于后面项目中遇到很多问题之后才又反复的去查文档,解决问题.<br>我认为,不应该是这样的,这种程度,仅仅只能让我有处理问题的能力,虽然经验让我再遇到问题的时候知道大概的导向,但这样永远不会建立起对Vue技术怀有的自信.<br>于是,我打算再来一遍官方文档,记录其中从未曾了解过的东西.在这之后,我便会去尝试着去读读Vue的源码,并分享出来.</p></blockquote><a id="more"></a><h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><p><code>&lt;a :[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;</code></p><p>这里的 <code>attributeName</code> 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的 Vue 实例有一个 <code>data</code> 属性 <code>attributeName</code>，其值为 “href”，那么这个绑定将等价于 <code>v-bind:href</code></p><p>注意点: </p><ul><li><code>attributeName</code> 应该全部都是小写</li><li><code>attributeName</code> 如果是通过表达式生成的,那应将其放在计算属性中,避免直接在HTML中书写表达式</li></ul><h3 id="动态class和style的几种写法"><a href="#动态class和style的几种写法" class="headerlink" title="动态class和style的几种写法"></a>动态class和style的几种写法</h3><ul><li><p>class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> &lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; 'active': isActive, 'text-danger': hasError &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> <span class="comment">// 对象语法</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> &lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"classObject"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="comment">// 对象语法</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> &lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"[&#123; 'active': isActive &#125;, errorClass]"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="comment">// 数组语法 </span></span><br><span class="line"></span><br><span class="line">   data: &#123;</span><br><span class="line">   isActive: <span class="literal">true</span>,</span><br><span class="line">   hasError: <span class="literal">false</span>,</span><br><span class="line">   classObject: &#123;</span><br><span class="line">     active: <span class="literal">true</span>,</span><br><span class="line">     <span class="string">'text-danger'</span>: <span class="literal">false</span></span><br><span class="line">   &#125;,</span><br><span class="line">   errorClass: <span class="string">'text-danger'</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>style</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> &lt;div v-bind:style=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="comment">// 对象语法</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> &lt;div v-bind:style=<span class="string">"styleObject"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="comment">// 对象语法</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> &lt;div v-bind:style=<span class="string">"[styleObject, styleObject2]"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="comment">// 数组语法</span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">activeColor: <span class="string">'red'</span>,</span><br><span class="line">  fontSize: <span class="number">30</span>,</span><br><span class="line">styleObject: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'13px'</span></span><br><span class="line">  &#125;,</span><br><span class="line">styleObject2: &#123;</span><br><span class="line">    color: <span class="string">'blac'</span>,</span><br><span class="line">    fontSize: <span class="string">'13px'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p><code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code></p><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p><code>v-for</code>遍历对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">"(value, name, index) in object"</span>&gt;</span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue无法检测的数据变动的情况"><a href="#Vue无法检测的数据变动的情况" class="headerlink" title="Vue无法检测的数据变动的情况"></a>Vue无法检测的数据变动的情况</h3><ul><li><p>数组</p><ol><li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li><li>当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></li></ol><p>解决办法:</p><ul><li>使用<code>vm.$set()</code> eg. <code>vm.$set(vm.items, indexOfItem, newValue)</code></li><li>为数组重新赋值新修改的数组</li></ul></li><li><p>对象</p><ol><li>对象属性的添加</li><li>对象属性的删除</li></ol><p>解决办法:</p><ul><li>为对象初始一个空的将要添加的对象</li><li>使用<code>vm.$set()</code> eg. <code>vm.$set(vm.Obj, keyOfObj, newValue)</code></li><li>使用<code>Object.assign()</code> eg. <code>vm.userProfile = Object.assign({}, vm.userProfile, { age: 27, favoriteColor: &#39;Green&#39;})</code></li></ul></li></ul><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li><p><code>.stop</code>           阻止事件冒泡</p></li><li><p><code>.prevent</code>     阻止浏览器默认行为发生</p></li><li><p><code>.capture</code>     捕获冒泡，即有冒泡发生时，有该修饰符的dom元素会先执行，如果有多个，从外到内依次执行，然后再按自然顺序执行触发的事件</p></li><li><p><code>.self</code>           将事件绑定到自身，只有自身才能触发，通常用于避免冒泡事件的影响</p></li><li><p><code>.once</code>           设置事件只能触发一次，比如按钮的点击等</p></li><li><p><code>.passive</code>      执行浏览器的默认行为</p></li></ul><blockquote><p>【浏览器只有等内核线程执行到事件监听器对应的JavaScript代码时，才能知道内部是否会调用preventDefault函数来阻止事件的默认行为，所以浏览器本身是没有办法对这种场景进行优化的。这种场景下，用户的手势事件无法快速产生，会导致页面无法快速执行滑动逻辑，从而让用户感觉到页面卡顿。】<br>通俗点说就是每次事件产生，浏览器都会去查询一下是否有preventDefault阻止该次事件的默认动作。我们加上passive就是为了告诉浏览器，不用查询了，我们没用preventDefault阻止默认动作。<br>这里一般用在滚动监听，@scoll，@touchmove 。因为滚动监听过程中，移动每个像素都会产生一次事件，每次都使用内核线程查询prevent会使滑动卡顿。我们通过passive将内核线程查询跳过，可以大大提升滑动的流畅度</p></blockquote><h3 id="键盘按键修饰符"><a href="#键盘按键修饰符" class="headerlink" title="键盘按键修饰符"></a>键盘按键修饰符</h3><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code></li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><h3 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h3><ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ul><h3 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h3><p>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p><ul><li><p><code>.ctrl</code></p></li><li><p><code>.alt</code></p></li><li><p><code>.shift</code></p></li><li><p><code>.meta</code>         对应command 键 (⌘)和Windows 徽标键 (⊞)</p></li><li><p><code>.exact</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl</span>=<span class="string">"onClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">"onCtrlClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.exact</span>=<span class="string">"onClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h3><ul><li><code>.lazy</code>      在“change”时而非“input”时更新</li><li><code>.number</code>  自动将输入值转为number类型</li><li><code>.trim</code>          自动过滤用户输入的首尾空白字符</li></ul><h3 id="Vue全局导入基础组件的示例代码"><a href="#Vue全局导入基础组件的示例代码" class="headerlink" title="Vue全局导入基础组件的示例代码"></a>Vue全局导入基础组件的示例代码</h3><p>详述👉🏻<a href="https://github.com/chrisvfritz/vue-enterprise-boilerplate/blob/master/src/components/_globals.js" target="_blank" rel="noopener">chrisvfritz/vue-enterprise-boilerplate</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElTableColumnPro <span class="keyword">from</span> <span class="string">'./ElTableColumnPro.vue'</span></span><br><span class="line"></span><br><span class="line">ElTableColumnPro.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">Vue.component(ElTableColumnPro.name, ElTableColumnPro)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Vue) &#123;</span><br><span class="line"><span class="built_in">window</span>.Vue.use(ElTableColumnPro)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ElTableColumnPro</span><br></pre></td></tr></table></figure><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 插槽模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="inheritAttrs-attrs-listeners"><a href="#inheritAttrs-attrs-listeners" class="headerlink" title="inheritAttrs , $attrs , $listeners"></a>inheritAttrs , $attrs , $listeners</h3><p>总结一句话: $attrs存储非prop特性，inheritAttrs控制vue对非prop特性默认行为</p><p>详述👉🏻<a href="https://www.notion.so/Vue-inheritAttrs-attrs-listeners-f3c6e8175b2e4fd6a5d973b7b869c1a8" target="_blank" rel="noopener">Vue inheritAttrs, $attrs,$listeners  详解 </a></p><h3 id="依赖注入-provide-和-inject"><a href="#依赖注入-provide-和-inject" class="headerlink" title="依赖注入 provide 和 inject"></a>依赖注入 provide 和 inject</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">provide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getMap: <span class="keyword">this</span>.getMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父组件下的所有组件(子,孙,重孙...)</span></span><br><span class="line">inject: [<span class="string">'getMap'</span>]</span><br></pre></td></tr></table></figure><p>详述👉🏻<a href="https://www.notion.so/Vue-Provide-Inject-626f1d6c4841455b89b2ec3aa3388f22" target="_blank" rel="noopener">Vue的组件通信之Provide与Inject机制</a></p><h3 id="程序化的事件侦听器"><a href="#程序化的事件侦听器" class="headerlink" title="程序化的事件侦听器"></a>程序化的事件侦听器</h3><p>（懵逼的定义–其实就是创建实例和清除实例放在一起,简化操作和无用的代码）</p><ul><li>通过 <code>$on(eventName, eventHandler)</code> 侦听一个事件</li><li>通过 <code>$once(eventName, eventHandler)</code> 一次性侦听一个事件</li><li>通过 <code>$off(eventName, eventHandler)</code> 停止侦听一个事件</li></ul><p>详述👉🏻<a href="https://www.notion.so/vue-bf198384038841b7a5ae6b35ffe75cf0" target="_blank" rel="noopener">vue 程序化的事件侦听器</a></p><h3 id="强制更新-forceUpdate"><a href="#强制更新-forceUpdate" class="headerlink" title="强制更新 $forceUpdate"></a>强制更新 $forceUpdate</h3><p>如果你发现你自己需要在 Vue 中做一次强制更新，99.9% 的情况，是你在某个地方做错了事。</p><p>你可能还没有留意到数组和对象的变更检测注意事项，或者你可能依赖了一个未被 Vue 的响应式系统追踪的状态。</p><p>然而，如果你已经做到了上述的事项仍然发现在极少数的情况下需要手动强制更新，那么你可以通过 $forceUpdate 来做这件事。</p><h3 id="通过-v-once-创建低开销的静态组件"><a href="#通过-v-once-创建低开销的静态组件" class="headerlink" title="通过 v-once 创建低开销的静态组件"></a>通过 v-once 创建低开销的静态组件</h3><p>渲染普通的 HTML 元素在 Vue 中是非常快速的，但有的时候你可能有一个组件，这个组件包含了大量静态内容。在这种情况下，你可以在根元素上添加 v-once 特性以确保这些内容只计算一次然后缓存起来,并不再更新. ( 正常情况下不会用到 )</p><h3 id="过渡-transition"><a href="#过渡-transition" class="headerlink" title="过渡 transition"></a>过渡 transition</h3><p><strong>哪些组件/元素可以用?</strong></p><ul><li>条件渲染 (使用 <code>v-if</code>)</li><li>条件展示 (使用 <code>v-show</code>)</li><li>动态组件</li><li>组件根节点</li></ul><p><strong>过渡类</strong></p><ul><li><code>v-enter</code>：定义进入过渡的开始状态。</li><li><code>v-enter-active</code>：定义进入过渡生效时的状态。</li><li><code>v-enter-to</code>: 定义进入过渡的结束状态。</li><li><code>v-leave</code>: 定义离开过渡的开始状态。</li><li><code>v-leave-active</code>：定义离开过渡生效时的状态。</li><li><code>v-leave-to</code>: 定义离开过渡的结束状态。</li></ul><p>对于这些在过渡中切换的类名来说，如果你使用一个没有名字的 <code>，则 `v-` 是这些类名的默认前缀。如果你使用了</code>，那么 <code>v-enter</code> 会替换为 <code>my-transition-enter</code>。</p><p><strong>过渡模式</strong></p><ul><li><p><code>in-out</code>：新元素先进行过渡，完成之后当前元素过渡离开。</p></li><li><p><code>out-in</code>：当前元素先进行过渡，完成之后新元素过渡进入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=<span class="string">"fade"</span> mode=<span class="string">"out-in"</span>&gt; <span class="xml"><span class="comment">&lt;!-- ... the buttons ... --&gt;</span> <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><p><strong>自定义过渡类名</strong></p><ul><li><p><code>enter-class</code></p></li><li><p><code>enter-active-class</code></p></li><li><p><code>enter-to-class</code></p></li><li><p><code>leave-class</code></p></li><li><p><code>leave-active-class</code></p></li><li><p><code>leave-to-class</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  v-on:before-enter=<span class="string">"beforeEnter"</span></span><br><span class="line">  v-on:enter=<span class="string">"enter"</span></span><br><span class="line">  v-on:after-enter=<span class="string">"afterEnter"</span></span><br><span class="line">  v-on:enter-cancelled=<span class="string">"enterCancelled"</span></span><br><span class="line">  v-on:before-leave=<span class="string">"beforeLeave"</span></span><br><span class="line">  v-on:leave=<span class="string">"leave"</span></span><br><span class="line">  v-on:after-leave=<span class="string">"afterLeave"</span></span><br><span class="line">  v-on:leave-cancelled=<span class="string">"leaveCancelled"</span></span><br><span class="line">&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;<span class="regexp">/transition&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渲染函数-amp-JSX"><a href="#渲染函数-amp-JSX" class="headerlink" title="渲染函数&amp;JSX"></a>渲染函数&amp;JSX</h3><p>感觉好菜啊!读到这里发现读完之后没有什么GET到的点,做个记录,之后再返回来细细品一下.👉🏻<a href="https://vuejs.bootcss.com/v2/guide/render-function.html" target="_blank" rel="noopener">link</a></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>看到这里才发现新大陆👉🏻<a href="https://github.com/vuejs/awesome-vue#components--libraries" target="_blank" rel="noopener">link</a>, 以后要写一个自己的插件出来</p><h3 id="Over"><a href="#Over" class="headerlink" title="Over"></a>Over</h3><p>前前后后花了将近一周,终于将Vue的文档重新过了一遍, 确实, 收获还是蛮多的. 在平常项目开发中, 有许多的东西并不会真切的用到, 但是知识储备还是必须的. 这样在项目中遇到问题之后, 会有自己的一个思路, 从而可以更快的追溯到问题的根源. 继续努力!</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Vue目前算是我用的时间最长的一个框架了,但是最近总是在想,我真的了解Vue了吗,还是说,仅仅只是会用它而已了呢.&lt;br&gt;最开始用Vue的时候只是草草看了一遍文档,细节之处并未关心,以至于后面项目中遇到很多问题之后才又反复的去查文档,解决问题.&lt;br&gt;我认为,不应该是这样的,这种程度,仅仅只能让我有处理问题的能力,虽然经验让我再遇到问题的时候知道大概的导向,但这样永远不会建立起对Vue技术怀有的自信.&lt;br&gt;于是,我打算再来一遍官方文档,记录其中从未曾了解过的东西.在这之后,我便会去尝试着去读读Vue的源码,并分享出来.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://tomatoro.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>SEO你的HEXO博客</title>
    <link href="http://tomatoro.cn/archives/a6b6c05e.html"/>
    <id>http://tomatoro.cn/archives/a6b6c05e.html</id>
    <published>2019-12-03T12:31:11.000Z</published>
    <updated>2023-05-24T02:47:33.038Z</updated>
    
    <content type="html"><![CDATA[<h3 id="STEP1-百度收录站点"><a href="#STEP1-百度收录站点" class="headerlink" title="STEP1      百度收录站点"></a>STEP1      百度收录站点</h3><p>登录<a href="http://zhanzhang.baidu.com/" target="_blank" rel="noopener">百度站长平台</a>，在用户中心 =&gt; 站点管理添加你的站点网址</p><a id="more"></a><p>配置完站点属性后，进入最后一步：验证网站。有三种方式：文件验证、HTML标签验证、CNAME验证.( 这里如果不会自行百度一下吧,网上内容有很多,这里就不在累述了. )</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9jf84kymlj30y50lydl0.jpg" alt="HEXO%20SEO/Untitled.png"></p><h3 id="STEP2-keywords-和-url地址栏优化"><a href="#STEP2-keywords-和-url地址栏优化" class="headerlink" title="STEP2      keywords 和 url地址栏优化"></a>STEP2      keywords 和 url地址栏优化</h3><ul><li>在根目录和themes目录下的两个_config.yml文件下找到permalink将其修改为下面这样:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br><span class="line">permalink: archives/:abbrlink.html</span><br><span class="line">permalink_defaults:</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  rep: hex</span><br></pre></td></tr></table></figure><ul><li>安装相关的依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink -S</span><br></pre></td></tr></table></figure><ul><li>执行hexo部署命名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li>完成!</li></ul><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9jf88nkb6j30wm0ncdvb.jpg" alt="HEXO%20SEO/Untitled%201.png"></p><h3 id="STEP3-配置百度-主动推送-自动推送-和sitemap"><a href="#STEP3-配置百度-主动推送-自动推送-和sitemap" class="headerlink" title="STEP3      配置百度 主动推送 自动推送 和sitemap"></a>STEP3      配置百度 主动推送 自动推送 和sitemap</h3><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9jf8ekxbwj30rq05ndgx.jpg" alt="HEXO%20SEO/Untitled%202.png"></p><ul><li>安装相关依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit -S</span><br><span class="line">npm install hexo-generator-sitemap -S</span><br><span class="line">npm install hexo-generator-baidu-sitemap -S</span><br></pre></td></tr></table></figure><ul><li><p>主动推送和sitemap的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- <span class="built_in">type</span>: baidu_url_submitter <span class="comment">## 这是新加的</span></span><br><span class="line">  bucket: tomatoro.cn <span class="comment">## 你自己的域名</span></span><br><span class="line"></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br><span class="line"></span><br><span class="line">baidu_url_submit:</span><br><span class="line">  count: 100 <span class="comment">## 比如3，代表提交最新的三个链接</span></span><br><span class="line">  host: tomatoro.cn <span class="comment">## 在百度站长平台中注册的域名</span></span><br><span class="line">  token: --------- <span class="comment">## 请注意这是您的秘钥，请不要发布在公众仓库里!</span></span><br><span class="line">  path: baidu_urls.txt <span class="comment">## 文本文档的地址，新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9jf8jlu6wj30w80u0kjl.jpg" alt="HEXO%20SEO/Untitled%203.png"></p></li><li><p>自动推送的代码粘贴到相应的位置即可</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">      <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">          bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">      s.parentNode.insertBefore(bp, s);</span><br><span class="line">  &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>  <img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9jf8oq65mj30w90u0qv5.jpg" alt="HEXO%20SEO/Untitled%204.png"></p><ul><li>执行hexo部署命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><hr><p>将这些配置全部走完一遍之后, 你博客的SEO优化就算完成了, 在百度上去搜可以发现可以很轻松的搜索到你的博客. 但是, 请记住SEO是一条漫长的道路, 并不是一天就能实现网站排名靠前的, 需要你不断的更新高质量多的博文, 吸引流量才可以.</p><h3 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成!"></a>大功告成!</h3><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9jf8rqebgj30y20td4iz.jpg" alt="HEXO%20SEO/Untitled%205.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;STEP1-百度收录站点&quot;&gt;&lt;a href=&quot;#STEP1-百度收录站点&quot; class=&quot;headerlink&quot; title=&quot;STEP1      百度收录站点&quot;&gt;&lt;/a&gt;STEP1      百度收录站点&lt;/h3&gt;&lt;p&gt;登录&lt;a href=&quot;http://zhanzhang.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度站长平台&lt;/a&gt;，在用户中心 =&amp;gt; 站点管理添加你的站点网址&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="http://tomatoro.cn/tags/Blog/"/>
    
      <category term="SEO" scheme="http://tomatoro.cn/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>Notion绑定域名-你的笔记就是你的博客!</title>
    <link href="http://tomatoro.cn/archives/c60ac904.html"/>
    <id>http://tomatoro.cn/archives/c60ac904.html</id>
    <published>2019-11-06T16:04:28.000Z</published>
    <updated>2023-05-24T02:47:33.038Z</updated>
    
    <content type="html"><![CDATA[<p>为Notion公共页面提供自定义域名可能是最受要求的功能之一，而且目前看起来还不支持这样做（可以理解）但是，这里有一个使用Cloudflare Workers的解决方案。</p><h2 id="第一步-将你的域名服务器代理至Cloudflare"><a href="#第一步-将你的域名服务器代理至Cloudflare" class="headerlink" title="第一步: 将你的域名服务器代理至Cloudflare"></a>第一步: 将你的域名服务器代理至Cloudflare</h2><p>Cloudflare需要控制您的DNS，因此请按照本指南将名称服务器切换到它们。不用担心，您的DNS设置将保持不变。</p><p><a href="https://support.cloudflare.com/hc/en-us/articles/205195708-Changing-your-domain-nameservers-to-Cloudflare" target="_blank" rel="noopener">Changing your domain nameservers to Cloudflare</a></p><a id="more"></a><p>这一步很重要,大致可以理解为以下步骤:</p><ol><li><p>将你原来的nameservers更改为Cloudflare提供给你的nameserver</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8odl22lx1j30q40e8jxk.jpg" alt></p></li><li><p>比如我的域名是在阿里云的, 进行如下操作即可(修改后需要过一段时间等Cloudflare发邮箱给你)</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8odlue2awj326s0r8k9w.jpg" alt></p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8odlzc9ofj31nw0sw487.jpg" alt></p></li><li><p>在域名解析里添加一条A的记录,IP随便填</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8odm4hp7zj31tu0duwlq.jpg" alt></p></li><li><p>当收到邮件后,你的Cloudflare的Overview页会变成这样,就说明更改nameservers成功了</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8odnejjxlj316u0gsag0.jpg" alt></p></li><li><p>在Cloudflare的DNS页里也添加一条A的记录,IP随便填但是要保证Proxy Status是通的</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8odnkkaw5j31li0smtlp.jpg" alt></p></li></ol><h2 id="第二步-添加工程脚本"><a href="#第二步-添加工程脚本" class="headerlink" title="第二步: 添加工程脚本"></a>第二步: 添加工程脚本</h2><p>Big thanks to <a href="http://github.com/mayneyao" target="_blank" rel="noopener">Mayne</a> for writing this worker script. You can find the original in <a href="https://gist.github.com/mayneyao/b9fefc9625b76f70488e5d8c2a99315d" target="_blank" rel="noopener">this gist</a>.</p><p>以下是为你代理域的代码，因此请执行以下操作：</p><ol><li>Click on the ”Workers” tab</li><li>Click “Launch Editor”</li><li>On the left, click ”Add Script”</li><li>Name it <code>notion-worker</code></li></ol><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8odnqlau3j31lg0s04cz.jpg" alt></p><p>Once you have followed those steps, copy this script into that new file. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MY_DOMAIN = <span class="string">"example.com"</span></span><br><span class="line"><span class="keyword">const</span> START_PAGE = <span class="string">"https://www.notion.so/link/to/your/public/page"</span></span><br><span class="line"></span><br><span class="line">addEventListener(<span class="string">'fetch'</span>, event =&gt; &#123;</span><br><span class="line">  event.respondWith(fetchAndApply(event.request))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> corsHeaders = &#123;</span><br><span class="line">  <span class="string">"Access-Control-Allow-Origin"</span>: <span class="string">"*"</span>,</span><br><span class="line">  <span class="string">"Access-Control-Allow-Methods"</span>: <span class="string">"GET, HEAD, POST,PUT, OPTIONS"</span>,</span><br><span class="line">  <span class="string">"Access-Control-Allow-Headers"</span>: <span class="string">"Content-Type"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleOptions</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (request.headers.get(<span class="string">"Origin"</span>) !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    request.headers.get(<span class="string">"Access-Control-Request-Method"</span>) !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    request.headers.get(<span class="string">"Access-Control-Request-Headers"</span>) !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Handle CORS pre-flight request.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="literal">null</span>, &#123;</span><br><span class="line">      headers: corsHeaders</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Handle standard OPTIONS request.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="literal">null</span>, &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">"Allow"</span>: <span class="string">"GET, HEAD, POST, PUT, OPTIONS"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchAndApply</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (request.method === <span class="string">"OPTIONS"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> handleOptions(request)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">new</span> URL(request.url)</span><br><span class="line">  <span class="keyword">let</span> response</span><br><span class="line">  <span class="keyword">if</span> (url.pathname.startsWith(<span class="string">"/app"</span>) &amp;&amp; url.pathname.endsWith(<span class="string">"js"</span>)) &#123;</span><br><span class="line">    response = <span class="keyword">await</span> fetch(<span class="string">`https://www.notion.so<span class="subst">$&#123;url.pathname&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">let</span> body = <span class="keyword">await</span> response.text()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response = <span class="keyword">new</span> Response(body.replace(<span class="regexp">/www.notion.so/g</span>, MY_DOMAIN).replace(<span class="regexp">/notion.so/g</span>, MY_DOMAIN), response)</span><br><span class="line">      <span class="comment">// response = new Response(response.body, response)</span></span><br><span class="line">      response.headers.set(<span class="string">'Content-Type'</span>, <span class="string">"application/x-javascript"</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"get rewrite app.js"</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((url.pathname.startsWith(<span class="string">"/api"</span>))) &#123;</span><br><span class="line">    response = <span class="keyword">await</span> fetch(<span class="string">`https://www.notion.so<span class="subst">$&#123;url.pathname&#125;</span>`</span>, &#123;</span><br><span class="line">      body: request.body, <span class="comment">// must match 'Content-Type' header</span></span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">'content-type'</span>: <span class="string">'application/json;charset=UTF-8'</span>,</span><br><span class="line">        <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      method: <span class="string">"POST"</span>, <span class="comment">// *GET, POST, PUT, DELETE, etc.</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response = <span class="keyword">new</span> Response(response.body, response)</span><br><span class="line">    response.headers.set(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">"*"</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.pathname === <span class="string">`/`</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> pageUrlList = START_PAGE.split(<span class="string">"/"</span>)</span><br><span class="line">    <span class="keyword">let</span> redrictUrl = <span class="string">`https://<span class="subst">$&#123;MY_DOMAIN&#125;</span>/<span class="subst">$&#123;pageUrlList[pageUrlList.length<span class="number">-1</span>]&#125;</span>`</span></span><br><span class="line">    <span class="keyword">return</span> Response.redirect(redrictUrl, <span class="number">301</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    response = <span class="keyword">await</span> fetch(<span class="string">`https://www.notion.so<span class="subst">$&#123;url.pathname&#125;</span><span class="subst">$&#123;url.search&#125;</span>`</span>, &#123;</span><br><span class="line">      body: request.body, <span class="comment">// must match 'Content-Type' header</span></span><br><span class="line">      headers: request.headers,</span><br><span class="line">      method: request.method, <span class="comment">// *GET, POST, PUT, DELETE, etc.</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> response</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，你已经添加了脚本，您需要更改顶部的两个const：</p><ol><li><code>MY_DOMAIN</code> 表示你需要代理的域名-<strong>你自己的域名</strong> ( E.G. example.com) </li><li><code>START_PAGE</code> 表示你代理的目标域名地址-<strong>notion的地址</strong>(E.G.<a href="https://www.notion.so/link/to/your/public/page" target="_blank" rel="noopener">https://www.notion.so/link/to/your/public/page</a>)</li></ol><p>保存你的脚本,然后返回上一层</p><h2 id="第三步-添加一个通配符路径才处理你的所有流量"><a href="#第三步-添加一个通配符路径才处理你的所有流量" class="headerlink" title="第三步: 添加一个通配符路径才处理你的所有流量"></a>第三步: 添加一个通配符路径才处理你的所有流量</h2><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8odnxcesuj31cu0u0wup.jpg" alt></p><p>在这里添加你的域名和通配符,然后在你Worker这一栏选择你刚刚配置的脚本名就可以了</p><pre><code>example.com/*</code></pre><p>到这里为止就大功告成了! 这时候你访问你自己的域名就可以看到notion的页面啦, 以后用notion写博客也可以使用自己的域名了, 可谓是相当酷炫了! </p><p>💎最后,这里有我的示例<a href="https://tomatoro.space" target="_blank" rel="noopener">tomatoro.space</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为Notion公共页面提供自定义域名可能是最受要求的功能之一，而且目前看起来还不支持这样做（可以理解）但是，这里有一个使用Cloudflare Workers的解决方案。&lt;/p&gt;
&lt;h2 id=&quot;第一步-将你的域名服务器代理至Cloudflare&quot;&gt;&lt;a href=&quot;#第一步-将你的域名服务器代理至Cloudflare&quot; class=&quot;headerlink&quot; title=&quot;第一步: 将你的域名服务器代理至Cloudflare&quot;&gt;&lt;/a&gt;第一步: 将你的域名服务器代理至Cloudflare&lt;/h2&gt;&lt;p&gt;Cloudflare需要控制您的DNS，因此请按照本指南将名称服务器切换到它们。不用担心，您的DNS设置将保持不变。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://support.cloudflare.com/hc/en-us/articles/205195708-Changing-your-domain-nameservers-to-Cloudflare&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Changing your domain nameservers to Cloudflare&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="http://tomatoro.cn/tags/Blog/"/>
    
      <category term="Notion" scheme="http://tomatoro.cn/tags/Notion/"/>
    
  </entry>
  
  <entry>
    <title>Nginx常用命令</title>
    <link href="http://tomatoro.cn/archives/96d8af1a.html"/>
    <id>http://tomatoro.cn/archives/96d8af1a.html</id>
    <published>2019-10-23T11:28:24.000Z</published>
    <updated>2023-05-24T02:47:33.038Z</updated>
    
    <content type="html"><![CDATA[<p>启动nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>关闭nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><p>退出nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s quit</span><br></pre></td></tr></table></figure><p>重启nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><a id="more"></a><p>使用brew下载nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>查看目前执行的任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services list</span><br></pre></td></tr></table></figure><p>进入nginx 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/etc/nginx</span><br></pre></td></tr></table></figure><p>查看nginx的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi nginx.conf</span><br></pre></td></tr></table></figure><p>查看nginx配置有没有生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line">nginx: the configuration file /usr/<span class="built_in">local</span>/etc/nginx/nginx.conf syntax is ok</span><br><span class="line"></span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure><p>启动nginx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start nginx</span><br></pre></td></tr></table></figure><p>重启nginx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services restart nginx</span><br></pre></td></tr></table></figure><p>停止nginx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services stop nginx</span><br></pre></td></tr></table></figure><p>查看是否启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep nginx</span><br><span class="line"></span><br><span class="line">0 63206 1 0 5:21下午 ?? 0:00.00 nginx: master process nginx</span><br><span class="line"></span><br><span class="line">-2 63274 63206 0 5:23下午 ?? 0:00.01 nginx: worker process</span><br><span class="line"></span><br><span class="line">501 65848 62966 0 5:52下午 ttys001 0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn nginx</span><br></pre></td></tr></table></figure><p>停止当前master的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">kill</span> -QUIT 63206</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;启动nginx&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;关闭nginx&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nginx -s stop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;退出nginx&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nginx -s quit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;重启nginx&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nginx -s reload&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://tomatoro.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Git在团队中的最佳实践</title>
    <link href="http://tomatoro.cn/archives/f33d987.html"/>
    <id>http://tomatoro.cn/archives/f33d987.html</id>
    <published>2019-10-23T11:00:14.000Z</published>
    <updated>2023-05-24T02:47:33.038Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87ysjhs9oj30u014ek1b.jpg" alt></p><a id="more"></a><h4 id="Git-Flow常用的分支"><a href="#Git-Flow常用的分支" class="headerlink" title="Git Flow常用的分支"></a>Git Flow常用的分支</h4><ul><li>Production 分支</li></ul><p>也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改</p><ul><li>Develop 分支</li></ul><p>这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支</p><ul><li>Feature 分支</li></ul><p>这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release</p><ul><li>Release分支</li></ul><p>当你需要一个发布一个新Release的时候，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支</p><ul><li>Hotfix分支</li></ul><p>当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release</p><h4 id="Git-Flow如何工作"><a href="#Git-Flow如何工作" class="headerlink" title="Git Flow如何工作"></a>Git Flow如何工作</h4><h4 id="初始分支"><a href="#初始分支" class="headerlink" title="初始分支"></a>初始分支</h4><p>所有在Master分支上的Commit应该Tag</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87yso01gdj30h2044glr.jpg" alt></p><h4 id="Feature-分支"><a href="#Feature-分支" class="headerlink" title="Feature 分支"></a>Feature 分支</h4><p>分支名 feature/*</p><p>Feature分支做完后，必须合并回Develop分支, 合并完分支后一般会删点这个Feature分支，但是我们也可以保留</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87ysrtwikj30h207g3yz.jpg" alt></p><h4 id="Release分支"><a href="#Release分支" class="headerlink" title="Release分支"></a>Release分支</h4><p>分支名 release/*</p><p>Release分支基于Develop分支创建，打完Release分之后，我们可以在这个Release分支上测试，修改Bug等。同时，其它开发人员可以基于开发新的Feature (记住：一旦打了Release分支之后不要从Develop分支上合并新的改动到Release分支)</p><p>发布Release分支时，合并Release到Master和Develop， 同时在Master分支上打个Tag记住Release版本号，然后可以删除Release分支了。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87ysygdm3j30h208w0tc.jpg" alt></p><h4 id="维护分支-Hotfix"><a href="#维护分支-Hotfix" class="headerlink" title="维护分支 Hotfix"></a>维护分支 Hotfix</h4><p>分支名 hotfix/*</p><p>hotfix分支基于Master分支创建，开发完后需要合并回Master和Develop分支，同时在Master上打一个tag</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87yt25rc1j30h20akaat.jpg" alt></p><h4 id="Git-Flow代码示例"><a href="#Git-Flow代码示例" class="headerlink" title="Git Flow代码示例"></a>Git Flow代码示例</h4><p>a. 创建develop分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch develop</span><br><span class="line">git push -u origin develop</span><br></pre></td></tr></table></figure><p>b. 开始新Feature开发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b some-feature develop</span><br><span class="line"><span class="comment"># Optionally, push branch to origin:</span></span><br><span class="line">git push -u origin some-feature    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 做一些改动    </span></span><br><span class="line">git status</span><br><span class="line">git add some-file</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p>c. 完成Feature</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并feature到dev</span></span><br><span class="line">git pull origin develop</span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff some-feature</span><br><span class="line">git push origin develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地feature</span></span><br><span class="line">git branch -d some-feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远端feature</span></span><br><span class="line">git push origin --delete some-feature</span><br></pre></td></tr></table></figure><p>d. 开始Relase（test分支）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release-0.1.0 develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional: Bump version number, commit</span></span><br><span class="line"><span class="comment"># Prepare release, commit</span></span><br></pre></td></tr></table></figure><p>e. 完成Release</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并到master</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge --no-ff release-0.1.0</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment">#合并到dev</span></span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff release-0.1.0</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地release</span></span><br><span class="line">git branch -d release-0.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远端release</span></span><br><span class="line">git push origin --delete release-0.1.0   </span><br><span class="line"></span><br><span class="line"><span class="comment"># master打标记</span></span><br><span class="line">git tag -a v0.1.0 master</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p>f. 开始Hotfix（bugfix分支）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hotfix-0.1.1 master</span><br></pre></td></tr></table></figure><p>g. 完成Hotfix</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并到master</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge --no-ff hotfix-0.1.1</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并到dev</span></span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff hotfix-0.1.1</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地hotfix</span></span><br><span class="line">git branch -d hotfix-0.1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为本次bug修改打标记</span></span><br><span class="line">git tag -a v0.1.1 master</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/006y8mN6ly1g87ysjhs9oj30u014ek1b.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://tomatoro.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Node学习笔记01</title>
    <link href="http://tomatoro.cn/archives/d57ffb29.html"/>
    <id>http://tomatoro.cn/archives/d57ffb29.html</id>
    <published>2019-09-05T18:45:22.000Z</published>
    <updated>2023-05-24T02:47:33.038Z</updated>
    
    <content type="html"><![CDATA[<p>我在做什么, 我拿时间换了什么…                                             —me</p><blockquote><p>九月计划—每天利用下班后的两个学习把Node啃掉! 这是我的学习笔记, 希望这可以做为一个坚持下去的动力!</p></blockquote><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Nodejs 能够做什么，可以解决一些什么样的问题，它的使用场景…<br>如果你有兴趣，请记住一定要自己动手，哪怕照着实例写一遍，真真实实的感受代码运行时的喜悦与兴奋，激发自己对新领域的兴趣。</p><blockquote><p>默认你已经安装了 Nodejs 和 npm 包管理器，并且熟悉一些简单的操作，如 nodejs 代码的运行启动，npm 包的安装命令等基础操作。</p></blockquote><h3 id="第一个服务端应用"><a href="#第一个服务端应用" class="headerlink" title="第一个服务端应用"></a>第一个服务端应用</h3><h5 id="1-hello-world"><a href="#1-hello-world" class="headerlink" title="1. hello world"></a>1. hello world</h5><p>首先通过一个前端工程师最常接触却不属于前端范畴的内容去了解一下 Nodejs，创建一个 http 服务。这里使用 Nodejs 自带的 http 模块创建一个 http 服务，你可以使用通过浏览器或者命令行来发起一个 http 请求，直观的感受服务端的 JavaScript。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">res.end(<span class="string">'Hello World !'</span>)</span><br><span class="line">&#125;).listen(<span class="number">8000</span>,()=&gt;&#123;</span><br><span class="line">consoloe.log(<span class="string">'listen on 8000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的例子中，通过使用 node 自带的 http 模块，调用其 http.creatServer 方法在本机上开启了一个 http 服务，监听了本地的 8000 端口，代码逻辑很简单，当接收到一个 req 请求时，调用 res.end 返回一个字符串 “hello world” 给带客户端，旨在让你对 Nodejs 有一个直观的体验。</p><p>可以使用 node http.js 命令来执行这段代码，通过浏览器来访问 <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a> 或者 <a href="http://localhost:800" target="_blank" rel="noopener">http://localhost:800</a> 来查看结果。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87z7owtx6j310i0903zc.jpg" alt></p><p>一个由 Nodejs 的 http 服务提供的 hello world 跑起来了，简洁快速吧。接下来再来实现一个前端工作中与服务端最紧密的内容来看看 Nodejs 的魅力，数据接口。</p><h5 id="2-如何提供一个-API"><a href="#2-如何提供一个-API" class="headerlink" title="2. 如何提供一个 API"></a>2. 如何提供一个 API</h5><p>首先这里确定所要提供的 api 是我们最常用的 json 格式，所以我们要注意后端返回给前端的数据类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  name: <span class="string">'Nodejs 入门示例'</span>,</span><br><span class="line">  description: <span class="string">'这是返回信息的描述内容'</span>,</span><br><span class="line">  date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;;</span><br><span class="line">http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">res,setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json;charset=utf-8'</span>)</span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">res.end(result)</span><br><span class="line">&#125;).listen(<span class="number">8000</span>, ()=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listen on 8000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上例子中，先确定了一个数据模型 data，内部一共有三个字段。这里的数据模型就是前端开发前与后端所定义的返回格式，最终前端要拿到这个 JSON 格式的数据在客户端进行处理。代码逻辑相比于 Hello World，规定了返回的数据格式，以及设定了返回请求的文本类型为 application/json，然后调用 res.end 返回到客户端。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87z82p4bsj310e0e4q4t.jpg" alt></p><p>可以继续使用浏览器发起 http 请求来查看结果，一个简单且熟悉的 JSON 数据接口已经完成了。你可以按照前端最常用的调用方式，如 ajax 或者 axios 来请求接口来在你的前端项目使用它。</p><p>但是上面例子中的接口和我们常用的接口有一个差异点，就是接口名称和返回内容均不规范，使用者直接通过没有路径的 <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a> 来使用接口，这跟我们日常使用的接口是完全不一样的，那我们接下来再看一下如何给提供一个规范化的接口呢？</p><h5 id="3-一个规范的接口"><a href="#3-一个规范的接口" class="headerlink" title="3. 一个规范的接口"></a>3. 一个规范的接口</h5><p>规范的接口具备哪些条件呢？简单总结一下。</p><blockquote><p>接口名称：接口名称要体现出大致的使用场景，例如增删改查的动作。</p><p>接口返回：接口返回要有规范化的标识，如成功与否错误内容等。</p></blockquote><p>接下来通过上面这两个点，按照标准的接口规范来实现一下上面的接口，看看 Nodejs 是如何给前端提供接口的。这里先约定要提供的接口名称内含 api 标志，api 所要做的动作等一些关键信息。如下格式：</p><blockquote><p><a href="http://localhost:8000/api/search/data?userId=12345" target="_blank" rel="noopener">http://localhost:8000/api/search/data?userId=12345</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'quertstring'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成一段返回值</span></span><br><span class="line"><span class="keyword">const</span> getResponse = <span class="function"><span class="params">userId</span> =&gt;</span>(&#123;</span><br><span class="line">success: <span class="literal">true</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">userId,</span><br><span class="line">name: <span class="string">'NodeJS'</span>,</span><br><span class="line">description: <span class="string">'这是返回的信息'</span>,</span><br><span class="line">date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// http 服务</span></span><br><span class="line">http.creatServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">res.setHeader = (<span class="string">'Content-Type'</span>, <span class="string">'application/json;charset=utf-8'</span>)</span><br><span class="line"><span class="keyword">const</span> reqUrl = url.parse(req.url)</span><br><span class="line"><span class="comment">// 判断接口路径是否是约定好的</span></span><br><span class="line"><span class="keyword">if</span>(reqUrl.pathname === <span class="string">'api/search/data'</span>)&#123;</span><br><span class="line"><span class="comment">// 获取链接上传来的URL参数</span></span><br><span class="line"><span class="keyword">const</span> uid = qs.parse(reqUrl.query).userId</span><br><span class="line"><span class="comment">// 生成返回值</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="built_in">JSON</span>.stringify(getResponse(uid))</span><br><span class="line">res.end(result)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">res.writeHead(<span class="number">404</span>)</span><br><span class="line">res.end(<span class="string">'NotFund'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;).listen(<span class="number">8000</span>,()=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'listen on 8000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的例子中，新使用 Nodejs 另一个自带的模块 url，url 模块顾名思义是一个处理 href 的库，它将 href 拆分成各个子内容，同时为了能处理客户端带来的 userId 参数还使用了自带的 querystring 模块，它可以将链接上问号后的 query 参数获取到，以便服务端代码能使用他们，他们均属于工具库，下面看看官方对于 URL 模块将 href 拆分的颗粒度图，清晰的了解一下一个请求链接，可以被拆分成什么颗粒度。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87z880x83j310a0jitgk.jpg" alt></p><p>实例中的源码简单解析一下，当服务接收到请求时，先判断请求的 api 名称是不是事先约定好的 / api/search/data，判断通过后，将前端传递在链接上的参数 userId 获取到，处理后插入到返回的 json 数据中，即可通过 res.end 来下发数据，如果路径判断失败，则返回 404 的状态码，并且进入 Notfund 页面，</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87z8bafvgj310i0g8n5m.jpg" alt></p><p>一个规范的接口已经开发完成了，简单总结一下，上面以渐进式的方式了解了 Nodejs 如何给前端来提供一个规范化的 http 接口，了解了服务端的 JavaScript 所具备的能力，接下来再从另一个前端工程师比较少接触的内容——文件操作，来进一步了解 Nodejs。</p><h3 id="文件操作那些事"><a href="#文件操作那些事" class="headerlink" title="文件操作那些事"></a>文件操作那些事</h3><p>对于文件操作相关的内容，前端程序员一般是不会触及的，而且 JavaScript 语言本身也并没有暴露操作文件的方法。而在 Nodejs 中，本身便提供了 fs 文件操作模块，这个模块模块底层并不是 JavaScript 来编写的，是具备操作文件的 C++ 语言编写的，其封装完成后将上层暴露给 Nodejs，然后便可以使用 JavaScript 的语法来调用它。</p><h5 id="1-读一个文件"><a href="#1-读一个文件" class="headerlink" title="1. 读一个文件"></a>1. 读一个文件</h5><p>在 Nodejs 中，读文件有两种形式，一种是同步的另一种是异步的，同步可以理解为读文件这个过程要等待，就是一旦执行的读这个操作的时候，你的代码就被” 卡 “住了，直到文件读完才能继续执行，来看看下面的例子。</p><blockquote><p>先新增一个 test.md 文件配合读操作，文件内容为：### 我是一个文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fsread.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> file = fs.readFileSync(<span class="string">'./test.md'</span>, <span class="string">'utf8'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(file);</span><br></pre></td></tr></table></figure><p>使用 node fsread.js 来运行上面的代码，从上面简单的几行你就可以发现成功将 test.md 文件里的内容读出来，可以打印到了命令行 console 里，突然发现 JavaScript 语言的强大了吧，很神奇吧。</p><p>但是 Nodejs 天生是为异步而生的，所以必须要体验一下异步读文件是怎么的过程，与同步的表现有何异同。所以 下面示例一个异步回调的方式去读一个文件，异步的意思就是读文件这个操作进行的同时，读操作下面的 JavaScript 代码也在执行，就如同我们熟悉的软件后台运行一样，你可以继续你的桌面操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sync start'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./test.md'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test.md 的内容'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sync progress'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./test2.md'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test2.md 的内容'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sync finish'</span>);</span><br></pre></td></tr></table></figure><p>在上面的例子中，要求是一次读取两个文件，两个文件之间并没有相关依赖性，所以这种 场景下我们更希望他们各做各的，无需去等。所以没有必要像上面同步的方式，等第一个结束再进入第二个的读取，所以使用异步方式更合适。  </p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87z8gocjkj310o0datek.jpg" alt></p><p>从上面的执行结果也可以看出来，fs.readFile 这个异步回调操作均在三个同步代码 console 的后面，并没有像同步等待读操作的结束。</p><p>下面来个图看看这个同步 API 和异步 API 有何异同。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87z8jvg66j310k0ng49g.jpg" alt></p><p>图片上半部分是异步读文件，可以看出来，读的操作可以理解为同时刻执行的。</p><p>图片下半部分是同步读文件，第二个读的操作需要先等待第一个读完才可以。</p><p>举个现实生活中同步的场景，运动会接力赛，A,B 两个班比赛接力，虽然 A,B 两个班无依赖，但是 A 班的第二名同学则需要第一名同学的接力棒拿到后才可继续跑，此时 A 班的运动员之间就属于同步阻塞类型。</p><p>在举个异步的场景，老板通过全员会议下达了一个任务，任务是大家做一百个俯卧撑，谁先做完任务则可以领取 10000 元红包的奖励，大家听到后纷纷原地做起，在这时候各个员工之间就是异步的，他们各做各的，谁先做完就可以执行老板给他们的开始说的领取奖励操作，这个操作可以理解为异步回调函数。</p><h5 id="2-写一个文件"><a href="#2-写一个文件" class="headerlink" title="2. 写一个文件"></a>2. 写一个文件</h5><p>Nodejs 写文件也是有两个类型，同步与异步，实际执行流程与上面的 “读” 是一样的。</p><p>下面进入同步读文件的例子，执行下面的代码你会发现多了一个 test3.md 文件，并且写入’### 我是测试文件 test3’的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> body = <span class="string">'### 我是测试文件test3的内容'</span>;</span><br><span class="line">fs.writeFileSync(<span class="string">'./test3.md'</span>, body);</span><br></pre></td></tr></table></figure><p>再来看一下异步写一个文件的例子，做一个对比。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 来一个异步的看看。</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> body = <span class="string">'### 我是测试文件test4的内容'</span>;</span><br><span class="line">fs.writeFile(<span class="string">'./test4.md'</span>, body, (err) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'文件test4已被保存'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> body2 = <span class="string">'### 我是测试文件test5的内容'</span>;</span><br><span class="line">fs.writeFile(<span class="string">'./test5.md'</span>, body2, (err) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'文件test5已被保存'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是写文件的结果，这时候你的本地会多出两个文件 test4.md 和 test5.md 出来。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g87z8ngphij310i0cmwkq.jpg" alt></p><h5 id="3-其他文件操作"><a href="#3-其他文件操作" class="headerlink" title="3. 其他文件操作"></a>3. 其他文件操作</h5><p>其实 Nodejs 提供了丰富的文件操作接口，除了读写，还有像复制，给文件授权，删除一个文件，文件夹的操作，文件内容的监听等，如果你有对文件的操作需求，请先在文档查一下看是否能够满足你。</p><blockquote><p>文档地址：<a href="http://nodejs.cn/api/fs.html" target="_blank" rel="noopener">http://nodejs.cn/api/fs.html</a></p></blockquote><p>下面来一个文件内容监听的例子，带你看看一个文件变化时也能被观察到乐趣。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.watch(<span class="string">'./test6.md'</span>, <span class="string">'utf8'</span>, (eventType, filename)=&gt;&#123;</span><br><span class="line">  <span class="comment">// eventType 是 'rename' 或 'change'，</span></span><br><span class="line">  <span class="comment">// filename 是触发事件的文件的名称</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'eventType'</span>, eventType);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'filename'</span>, filename);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我将 test6.md 的内容进行手动的变化，并且改了名字，这里都被监听到了，是不是很有趣，跟我一起来练习吧。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文从前端工程师们最常接触却又不属于前端领域的两个方面，http 服务与文件操作展开了学习，从几个简单易懂的例子带领去了解了 Nodejs。其实Node非诚简单便捷，几行代码就能做出一些想要的效果，能快速的完成要求。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我在做什么, 我拿时间换了什么…                                             —me&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;九月计划—每天利用下班后的两个学习把Node啃掉! 这是我的学习笔记, 希望这可以做为一个坚持下去的动力!&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Node" scheme="http://tomatoro.cn/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Git worktree 的使用</title>
    <link href="http://tomatoro.cn/archives/a2d3386.html"/>
    <id>http://tomatoro.cn/archives/a2d3386.html</id>
    <published>2019-08-30T16:23:59.000Z</published>
    <updated>2023-05-24T02:47:33.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><blockquote><p>在同一个 git 仓库中，有时候会遇到这样的情况, 你将你分支的代码开发好了,正在运行代码测试. 这时候你接到一个任务–&gt;主分支上有一个bug需要立刻处理. 而你的代码测试已经跑了一大半了, 你不想结束这个测试, 但还必须去主分支上修改这个BUG, 这时候git stash的暂存明显是不能用的, 而重新clone一个新的项目下来有显得很麻烦. 这时候就是Git WorkTree 大展身手的时候了</p></blockquote><p><code>git</code> 从 2.6.0 的版本开始增加了新的指令，可以用来解决这个问题，就是：</p><h5 id="git-worktree"><a href="#git-worktree" class="headerlink" title="git worktree"></a><code>git worktree</code></h5><a id="more"></a><p>一个 <code>git</code> 仓库默认有一个 <code>worktree</code>，当需要在同一个仓库兼顾两个或者多个分支的开发时，可以为每一个分支新建一个 <code>worktree</code> 。他们彼此之间不会相互影响，其表现相当于在一个其他的目录重新 <code>git clone</code> 了一把这个 <code>git</code> 仓库。实际上与重建目录不同的是，他们彼此之间又有关联，任何一个 <code>worktree</code> 的提交都会无痛增加到其他的 <code>worktree</code> ，而不需要通过远程仓库做同步。一个分支的工作结束之后，删除那个分支对应的目录即可关闭这个 <code>worktree</code>。总之就是，看来还算完美的一个解决方案。</p><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><h5 id="git-worktree-add-lt-path-gt-lt-branch-gt-："><a href="#git-worktree-add-lt-path-gt-lt-branch-gt-：" class="headerlink" title="git worktree add &lt;path&gt; [&lt;branch&gt;]："></a><code>git worktree add &lt;path&gt; [&lt;branch&gt;]</code>：</h5><p>增加一个新的 <code>worktree</code> ，并指定了其关联的目录是 <code>path</code> ，关联的分支是 <code>&lt;branch&gt;</code> 。后者是一个可选项，默认值是 <code>HEAD</code> 分支。如果 <code>&lt;branch&gt;</code> 已经被关联到了一个 <code>worktree</code> ，则这次 add 会被拒绝执行，可以通过增加 <code>-f | --force</code> 选项来强制执行。</p><p>同时，可以使用 <code>-b &lt;new-branch&gt;</code> 基于 <code>&lt;branch&gt;</code> 新建分支并使这个新分支关联到这个新的 <code>worktree</code> 。如果 <code>&lt;new-branch&gt;</code> 已经存在，则这次 <code>add</code> 会被拒绝，可以使用 <code>-B</code> 代替这里的 <code>-b</code> 来强制执行，则原来的 <code>&lt;new-branch&gt;</code> 的提交进度会被重置为和 <code>&lt;branch&gt;</code> 一样的位置。</p><h5 id="git-worktree-list"><a href="#git-worktree-list" class="headerlink" title="git worktree list :"></a><code>git worktree list</code> :</h5><p>列出当前仓库已经存在的所有 <code>worktree</code> 的详细情况，包括每个 <code>worktree</code> 的关联目录，当前的提交点的哈希码和当前 <code>checkout</code> 到的关联分支。若没有关联分支，则是 <code>detached HEAD</code> 。</p><p>可以增加 <code>--porcelain</code> 选项，用来改变显示风格。即：使用 <code>label</code> 对应 <code>value</code> 的形式显示上面提到的内容。举例容易看出其中差别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git worktree list</span><br><span class="line">/path/to/bare-source            (bare)</span><br><span class="line">/path/to/linked-worktree        abcd1234 [master]</span><br><span class="line">/path/to/other-linked-worktree  1234abc  (detached HEAD)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git worktree list --porcelain</span><br><span class="line">worktree /path/to/bare-source</span><br><span class="line">bare</span><br><span class="line">​</span><br><span class="line">worktree /path/to/linked-worktree</span><br><span class="line">HEAD abcd1234abcd1234abcd1234abcd1234abcd1234</span><br><span class="line">branch refs/heads/master</span><br><span class="line">​</span><br><span class="line">worktree /path/to/other-linked-worktree</span><br><span class="line">HEAD 1234abc1234abc1234abc1234abc1234abc1234a</span><br><span class="line">detached</span><br></pre></td></tr></table></figure><h5 id="prune"><a href="#prune" class="headerlink" title="prune :"></a><code>prune</code> :</h5><p>在删除 <code>worktree</code> 的关联目录之后，清除 <code>worktree</code> 的信息。从而使一个 <code>worktree</code> 完整的删除。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h5 id="git-worktree-lock"><a href="#git-worktree-lock" class="headerlink" title="git worktree lock :"></a><code>git worktree lock</code> :</h5><p><code>git</code> 会定期的自动清除掉已经没有关联目录的那些 <code>worktree</code> 的信息。当你把一个 <code>worktree</code> 的关联目录创建到了一个可移动设备或者一块不是永久挂载的硬盘里的时候，使用这个命令可以防止这个 <code>worktree</code> 的信息被移除。</p><h5 id="git-worktree-unlock"><a href="#git-worktree-unlock" class="headerlink" title="git worktree unlock :"></a><code>git worktree unlock</code> :</h5><p>与上面的命令是一对。作用是解除锁定。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>看起来只是把 <code>git</code> 的文档大概翻译了一下，写一遍加深理解吧。也是刚开始使用的新命令，设计也是很稳重的，没有那么多花哨，没什么好的技巧可谈，但绝对是五星推荐的好用。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://link.jianshu.com?t=https%3A%2F%2Fgit-scm.com%2Fdocs%2Fgit-worktree" target="_blank" rel="noopener">git worktree</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在同一个 git 仓库中，有时候会遇到这样的情况, 你将你分支的代码开发好了,正在运行代码测试. 这时候你接到一个任务–&amp;gt;主分支上有一个bug需要立刻处理. 而你的代码测试已经跑了一大半了, 你不想结束这个测试, 但还必须去主分支上修改这个BUG, 这时候git stash的暂存明显是不能用的, 而重新clone一个新的项目下来有显得很麻烦. 这时候就是Git WorkTree 大展身手的时候了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;git&lt;/code&gt; 从 2.6.0 的版本开始增加了新的指令，可以用来解决这个问题，就是：&lt;/p&gt;
&lt;h5 id=&quot;git-worktree&quot;&gt;&lt;a href=&quot;#git-worktree&quot; class=&quot;headerlink&quot; title=&quot;git worktree&quot;&gt;&lt;/a&gt;&lt;code&gt;git worktree&lt;/code&gt;&lt;/h5&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://tomatoro.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git stash 暂存的操作</title>
    <link href="http://tomatoro.cn/archives/64676934.html"/>
    <id>http://tomatoro.cn/archives/64676934.html</id>
    <published>2019-08-30T16:12:55.000Z</published>
    <updated>2023-05-24T02:47:33.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><blockquote><p>我们在多人开发的时候,经常遇到开发某一个分支时,需要处理其他分支的事情. 这时就可以暂存手头的工作,切到其它分支,进行工作. 完事后再接回原来的分支并恢复之前的内容, 继续工作 Cool!</p></blockquote><a id="more"></a><h3 id="1-暂存操作"><a href="#1-暂存操作" class="headerlink" title="1. 暂存操作"></a>1. 暂存操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git status  <span class="comment">// 查看当前状态</span></span><br><span class="line"></span><br><span class="line">git add . <span class="comment">// 如果有修改,添加修改文件</span></span><br><span class="line"></span><br><span class="line">git stash save <span class="string">'本次暂存的标识名字'</span> <span class="comment">// 暂存操作</span></span><br></pre></td></tr></table></figure><h3 id="2-查看当前暂存的记录"><a href="#2-查看当前暂存的记录" class="headerlink" title="2. 查看当前暂存的记录"></a>2. 查看当前暂存的记录</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list <span class="comment">// 查看记录</span></span><br></pre></td></tr></table></figure><h3 id="3-恢复暂存的工作"><a href="#3-恢复暂存的工作" class="headerlink" title="3. 恢复暂存的工作"></a>3. 恢复暂存的工作</h3><blockquote><p>pop命令恢复,恢复后,暂存区域会删除当前的记录</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop stash@&#123;index&#125;  <span class="comment">// 恢复指定的暂存工作, 暂存记录保存在list内,需要通过list索引index取出恢复</span></span><br></pre></td></tr></table></figure><blockquote><p>apply命令恢复,恢复后,暂存区域会保留当前的记录</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply stash@&#123;index&#125; <span class="comment">// 恢复指定的暂存工作, 暂存记录保存在list内,需要通过list索引index取出恢复</span></span><br></pre></td></tr></table></figure><h3 id="4-删除暂存"><a href="#4-删除暂存" class="headerlink" title="4. 删除暂存"></a>4. 删除暂存</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash drop stash@&#123;index&#125; <span class="comment">// 删除某个暂存, 暂存记录保存在list内,需要通过list索引index取出恢复</span></span><br><span class="line"></span><br><span class="line">git stash clear <span class="comment">// 删除全部暂存</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;我们在多人开发的时候,经常遇到开发某一个分支时,需要处理其他分支的事情. 这时就可以暂存手头的工作,切到其它分支,进行工作. 完事后再接回原来的分支并恢复之前的内容, 继续工作 Cool!&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://tomatoro.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>【转】为什么我喜欢JavaScript的Optional Chaining</title>
    <link href="http://tomatoro.cn/archives/fafa2f28.html"/>
    <id>http://tomatoro.cn/archives/fafa2f28.html</id>
    <published>2019-08-27T11:37:19.000Z</published>
    <updated>2023-05-24T02:47:33.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>JavaScript 的特性极大地改变了你的编码方式。从 ES2015 开始，对我代码影响最多的功能是解构、箭头函数、类和模块系统。<br>截至 2019 年 8 月，一项新提案 optional chaining 达到了第3阶段，这将是一个很好的改进。Optional Chaining 改变了从深层对象结构访问属性的方式。<br>下面让我们来看看 optional chaining 是如何通过在深度访问可能缺少的属性时删除样板条件和变量来简化代码的。</p></blockquote><a id="more"></a><hr><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h3><p>由于 <code>JavaScript</code> 的动态特性，对象可以有区别很大的嵌套对象结构。</p><p>通常，你在以下情况下处理此类对象：</p><ul><li>获取远程 <code>JSON</code> 数据</li><li>使用配置对象</li><li>具有 <code>optional</code> 属性</li></ul><p>虽然这为对象提供了支持不同结构数据的灵活性，但是在访问这些对象的属性时会增加复杂性。</p><p><code>bigObject</code> 在运行时可以有不同的属性集：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// One version of bigObject</span></span><br><span class="line"><span class="keyword">const</span> bigObject = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  prop1: &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    prop2: &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      value: <span class="string">'Some value'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Other version of bigObject</span></span><br><span class="line"><span class="keyword">const</span> bigObject = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  prop1: &#123;</span><br><span class="line">    <span class="comment">// Nothing here   </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因此，你必须手动检查属性是否存在：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Later</span></span><br><span class="line"><span class="keyword">if</span> (bigObject &amp;&amp; </span><br><span class="line">    bigObject.prop1 != <span class="literal">null</span> &amp;&amp; </span><br><span class="line">    bigObject.prop1.prop2 != <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = bigObject.prop1.prop2.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这会产生很多样板代码。如果不需要写这些代码那就太好了。</p><p>让我们看看 <code>optional chaining</code> 如何解决这个问题，并减少样板条件。</p><hr><h3 id="2-轻松的深入访问属性"><a href="#2-轻松的深入访问属性" class="headerlink" title="2. 轻松的深入访问属性"></a>2. 轻松的深入访问属性</h3><p>让我们设计一个保存电影信息的对象。该对象包含一个 <code>title</code> 属性，以及可选的 <code>director</code> 和 <code>actors</code>。</p><p><code>movieSmall</code> 对象只包含 <code>title</code>，而 <code>movieFull</code> 包含完整的属性集：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> movieSmall = &#123;</span><br><span class="line">  title: <span class="string">'Heat'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> movieFull = &#123;</span><br><span class="line">  title: <span class="string">'Blade Runner'</span>,</span><br><span class="line">  director: &#123; <span class="attr">name</span>: <span class="string">'Ridley Scott'</span> &#125;,</span><br><span class="line">  actors: [&#123; <span class="attr">name</span>: <span class="string">'Harrison Ford'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'Rutger Hauer'</span> &#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>让我们写一个获取导演名字的函数。请记住，<code>director</code> 属性可能会不存在：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDirector</span>(<span class="params">movie</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (movie.director != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> movie.director.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getDirector(movieSmall); <span class="comment">// =&gt; undefined</span></span><br><span class="line">getDirector(movieFull);  <span class="comment">// =&gt; 'Ridley Scott'</span></span><br></pre></td></tr></table></figure><p><code>if (movie.director) {...}</code> 条件用于验证 <code>director</code> 属性是否已定义。如果没有这个预防措施，在访问<code>movieSmall</code> 对象 <code>director</code> 的时候，JavaScript 会抛出错误 <code>TypeError: Cannot read property &#39;name&#39; of undefined</code>。</p><p>这是使用新的 <code>optional chaining</code> 功能的正确位置，并删除 <code>movie.director</code> 的存在验证。新版本的<code>getDirector()</code>看起来要短得多：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDirector</span>(<span class="params">movie</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> movie.director?.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getDirector(movieSmall); <span class="comment">// =&gt; undefined</span></span><br><span class="line">getDirector(movieFull);  <span class="comment">// =&gt; 'Ridley Scott'</span></span><br></pre></td></tr></table></figure><p>在表达式 <code>movie.director?.name</code> 中你可以找到 <code>?.</code>： <code>optional chaining 运算符</code>。</p><p>在 <code>movieSmall</code> 的情况下，如果属性 <code>director</code> 丢失了。那么 <code>movie.director?.name</code> 的计算结果为 <code>undefined</code>。 <code>optional chaining 运算符</code>可防止抛出 <code>TypeError:Cannot read property &#39;name&#39; of undefined</code>。</p><p>相反，在 <code>movieFull</code> 的情况下，属性 <code>director</code> 可用。 <code>movie.director?.name</code> 的值为 <code>&#39;Ridley Scott&#39;</code>.。</p><p>简单来说，代码片段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let name = movie.director?.name;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let name;</span><br><span class="line">if (movie.director != null) &#123;</span><br><span class="line">  name = movie.director.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>?.</code> 通过减少 2 行代码简化了 <code>getDirector()</code> 函数。这就是我喜欢 <code>optional chaining</code> 的原因。</p><h3 id="2-1-数组项"><a href="#2-1-数组项" class="headerlink" title="2.1 数组项"></a>2.1 数组项</h3><p>但是 <code>optional chaining</code> 功能可以做更多的事情。你可以在同一表达式中使用多个 <code>optional chaining 运算符</code>。甚至可以使用它来安全地访问数组项目！</p><p>接下来的任务是编写一个返回电影主角名字的函数。</p><p>在 movie 对象中，<code>actors</code> 数组可以为空甚至丢失，因此你必须添加其他条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function getLeadingActor(movie) &#123;</span><br><span class="line">  if (movie.actors &amp;&amp; movie.actors.length &gt; 0) &#123;</span><br><span class="line">    return movie.actors[0].name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getLeadingActor(movieSmall); // =&gt; undefined</span><br><span class="line">getLeadingActor(movieFull);  // =&gt; &apos;Harrison Ford&apos;</span><br></pre></td></tr></table></figure><p><code>if (movie.actors &amp;&amp; movies.actors.length &gt; 0) {...}</code> 条件需要确保 <code>movie</code> 中包含 <code>actors</code> 属性，并且此属性至少有一个 actor。</p><p>通过使用 <code>optional chaining</code>，此任务很容易解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function getLeadingActor(movie) &#123;</span><br><span class="line">  return movie.actors?.[0]?.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getLeadingActor(movieSmall); // =&gt; undefined</span><br><span class="line">getLeadingActor(movieFull);  // =&gt; &apos;Harrison Ford&apos;</span><br></pre></td></tr></table></figure><p><code>actors?.</code> 确保 <code>actors</code> 属性存在。 <code>[0]?.</code> 确保第一个 actor 存在于列表中。很好！</p><hr><h3 id="3-nullish-合并"><a href="#3-nullish-合并" class="headerlink" title="3. nullish 合并"></a>3. nullish 合并</h3><p>名为 <a href="https://github.com/tc39/proposal-nullish-coalescing" target="_blank" rel="noopener">nullish coalescing operator</a> 的新提案建议用 <code>??</code> 处理 <code>undefined</code>或<code>null</code>，将它们默认为特定的值。</p><p>如果 <code>variable</code> 是<code>undefined</code>或<code>null</code>，则表达式 <code>variable ?? defaultValue</code> 的结果为<code>defaultValue</code>， 否则表达式的值为<code>variable</code> 的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const noValue = undefined;</span><br><span class="line">const value = &apos;Hello&apos;;</span><br><span class="line"></span><br><span class="line">noValue ?? &apos;Nothing&apos;; // =&gt; &apos;Nothing&apos;</span><br><span class="line">value   ?? &apos;Nothing&apos;; // =&gt; &apos;Hello&apos;</span><br></pre></td></tr></table></figure><p>当评估为 <code>undefined</code> 时，Nullish 合并可以通过默认值来改进 <code>optional chaining</code>。</p><p>例如，当 movie 对象中没有 actor 时，让我们改变 <code>getLeading()</code> 函数返回 <code>&quot;Unknown actor&quot;</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function getLeadingActor(movie) &#123;</span><br><span class="line">  return movie.actors?.[0]?.name ?? &apos;Unknown actor&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getLeadingActor(movieSmall); // =&gt; &apos;Unknown actor&apos;</span><br><span class="line">getLeadingActor(movieFull);  // =&gt; &apos;Harrison Ford&apos;</span><br></pre></td></tr></table></figure><hr><h3 id="4-optional-chaining-的-3-种形式"><a href="#4-optional-chaining-的-3-种形式" class="headerlink" title="4. optional chaining 的 3 种形式"></a>4. optional chaining 的 3 种形式</h3><p>可以用以下 3 种形式使用 <code>optional chaining</code> 。</p><p>第一种形式 <code>object?.property</code> 用于访问静态属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const object = null;</span><br><span class="line">object?.property; // =&gt; undefined</span><br></pre></td></tr></table></figure><p>第二种形式 <code>object？.[expression]</code> 用于访问动态属性或数组项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const object = null;</span><br><span class="line">const name = &apos;property&apos;;</span><br><span class="line">object?.[name]; // =&gt; undefined</span><br><span class="line"></span><br><span class="line">const array = null;</span><br><span class="line">array?.[0]; // =&gt; undefined</span><br></pre></td></tr></table></figure><p>最后，第三种形式 <code>object?.([arg1,[arg2,...]])</code> 执行一个对象方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const object = null;</span><br><span class="line">object?.method(&apos;Some value&apos;); // =&gt; undefined</span><br></pre></td></tr></table></figure><p>如果需要，可以通过组合这些表单来创建长的可选链：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const value = object.maybeUndefinedProp?.maybeNull()?.[propName];</span><br></pre></td></tr></table></figure><hr><h3 id="5-短路：停止于-null-undefined"><a href="#5-短路：停止于-null-undefined" class="headerlink" title="5. 短路：停止于 null/undefined"></a>5. 短路：停止于 <em>null/undefined</em></h3><p>有关 <code>optional chaining 运算符</code>的有趣之处在于，只要在其左侧 <code>leftHandSide?.rightHandSide</code> 中遇到无效值，右侧访问器的评估就会停止。这称为短路。</p><p>我们来看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const nothing = null;</span><br><span class="line">let index = 0;</span><br><span class="line"></span><br><span class="line">nothing?.[index++]; // =&gt; undefined</span><br><span class="line">index;              // =&gt; 0</span><br></pre></td></tr></table></figure><p><code>nothing</code> 保持一个 nullish 值，因此 <code>optional chaining</code> 评估为 <code>undefined</code> ，并跳过右侧访问器的评估。因为 <code>index</code> 编号不会增加。</p><hr><h3 id="6-何时使用-optional-chaining"><a href="#6-何时使用-optional-chaining" class="headerlink" title="6. 何时使用 optional chaining"></a>6. 何时使用 optional chaining</h3><p>一定要克制使用 <code>optional chaining</code> 操作符访问任何类型属性的冲动：这将会导致误导使用。下一节将介绍何时正确使用它。</p><h3 id="6-1-访问可能无效的属性"><a href="#6-1-访问可能无效的属性" class="headerlink" title="6.1 访问可能无效的属性"></a>6.1 访问可能无效的属性</h3><p><code>?.</code> 必须只在可能无效的属性附近使用：<code>maybeNullish?.prop</code>。在其他情况下，使用旧的属性访问器：<code>.property</code> 或 <code>[propExpression]</code>。</p><p>回想一下 movie 对象。查看表达式 <code>movie.director?.name</code>，因 为<code>director</code> 可以是 <code>undefined</code>，在<code>director</code>属性附近使用 <code>optional chaining 运算符</code>是正确的。</p><p>相反，使用 <code>?.</code> 来访问电影标题是没有意义的：<code>movie?.title</code>。movie 对象不会是无效的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// Good</span><br><span class="line">function logMovie(movie) &#123;</span><br><span class="line">  console.log(movie.director?.name);</span><br><span class="line">  console.log(movie.title);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Bad</span><br><span class="line">function logMovie(movie) &#123;</span><br><span class="line">  // director needs optional chaining</span><br><span class="line">  console.log(movie.director.name);</span><br><span class="line"></span><br><span class="line">  // movie doesn&apos;t need optional chaining</span><br><span class="line">  console.log(movie?.title);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-通常有更好的选择"><a href="#6-2-通常有更好的选择" class="headerlink" title="6.2 通常有更好的选择"></a>6.2 通常有更好的选择</h3><p>以下函数 <code>hasPadding()</code> 接受带有可选 <code>padding</code> 属性的样式对象。 <code>padding</code> 具有可选属性<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>。</p><p>下面尝试使用 <code>optional chaining 运算符</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function hasPadding(&#123; padding &#125;) &#123;</span><br><span class="line">  const top = padding?.top ?? 0;</span><br><span class="line">  const right = padding?.right ?? 0;</span><br><span class="line">  const bottom = padding?.bottom ?? 0;</span><br><span class="line">  const left = padding?.left ?? 0;</span><br><span class="line">  return left + top + right + bottom !== 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hasPadding(&#123; color: &apos;black&apos; &#125;);        // =&gt; false</span><br><span class="line">hasPadding(&#123; padding: &#123; left: 0 &#125; &#125;);  // =&gt; false</span><br><span class="line">hasPadding(&#123; padding: &#123; right: 10 &#125;&#125;); // =&gt; true</span><br></pre></td></tr></table></figure><p>虽然函数正确地确定元素是否具有填充，但是对于每个属性都使用 <code>optional chaining</code> 是非常困难的。</p><p>更好的方法是使用对象扩展运算符将填充对象默认为零值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function hasPadding(&#123; padding &#125;) &#123;</span><br><span class="line">  const p = &#123;</span><br><span class="line">    top: 0,</span><br><span class="line">    right: 0,</span><br><span class="line">    bottom: 0,</span><br><span class="line">    left: 0,</span><br><span class="line">    ...padding</span><br><span class="line">  &#125;;</span><br><span class="line">  return p.top + p.left + p.right + p.bottom !== 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hasPadding(&#123; color: &apos;black&apos; &#125;);        // =&gt; false</span><br><span class="line">hasPadding(&#123; padding: &#123; left: 0 &#125; &#125;);  // =&gt; false</span><br><span class="line">hasPadding(&#123; padding: &#123; right: 10 &#125;&#125;); // =&gt; true</span><br></pre></td></tr></table></figure><p>在我看来，这个版本的 <code>hasPadding()</code> 更容易阅读。</p><hr><h3 id="7-为什么我喜欢它？"><a href="#7-为什么我喜欢它？" class="headerlink" title="7. 为什么我喜欢它？"></a>7. 为什么我喜欢它？</h3><p>我喜欢 <code>optional chaining 运算符</code>，因为它允许从嵌套对象轻松访问属性。它可以减少通过编写样板文件来验证来自访问器链的每个属性访问器上无效值的工作。</p><p>当 <code>optional chaining</code> 与无效合并运算符组合时，你可以获得更好的结果，能够更轻松地处理默认值。</p><blockquote><p>转载信息<br>作者：Dmitri Pavlutin<br>翻译：疯狂的技术宅<br>原文：<a href="https://dmitripavlutin.com/javascript-optional-chaining/" target="_blank" rel="noopener">https://dmitripavlutin.com/ja…</a><br>来源：思否</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;JavaScript 的特性极大地改变了你的编码方式。从 ES2015 开始，对我代码影响最多的功能是解构、箭头函数、类和模块系统。&lt;br&gt;截至 2019 年 8 月，一项新提案 optional chaining 达到了第3阶段，这将是一个很好的改进。Optional Chaining 改变了从深层对象结构访问属性的方式。&lt;br&gt;下面让我们来看看 optional chaining 是如何通过在深度访问可能缺少的属性时删除样板条件和变量来简化代码的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="http://tomatoro.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>【转】网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？</title>
    <link href="http://tomatoro.cn/archives/3f0a5b42.html"/>
    <id>http://tomatoro.cn/archives/3f0a5b42.html</id>
    <published>2019-08-23T10:13:17.000Z</published>
    <updated>2023-05-24T02:47:33.042Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-原生-DOM-操作-vs-通过框架封装操作。"><a href="#1-原生-DOM-操作-vs-通过框架封装操作。" class="headerlink" title="1. 原生 DOM 操作 vs. 通过框架封装操作。"></a>1. 原生 DOM 操作 vs. 通过框架封装操作。</h3><p>这是一个<code>性能</code> vs. <code>可维护性</code>的取舍。框架的意义在于为你掩盖底层的 DOM 操作，让你用更声明式的方式来描述你的目的，从而让你的代码更容易维护。没有任何框架可以比纯手动的优化 DOM 操作更快，因为框架的 DOM 操作层需要应对任何上层 API 可能产生的操作，它的实现必须是普适的。针对任何一个 benchmark，我都可以写出比任何框架更快的手动优化，但是那有什么意义呢？在构建一个实际应用的时候，你难道为每一个地方都去做手动优化吗？出于可维护性的考虑，这显然不可能。框架给你的保证是，你在不需要手动优化的情况下，我依然可以给你提供过得去的性能。</p><a id="more"></a><h3 id="2-对-React-的-Virtual-DOM-的误解。"><a href="#2-对-React-的-Virtual-DOM-的误解。" class="headerlink" title="2. 对 React 的 Virtual DOM 的误解。"></a>2. 对 React 的 Virtual DOM 的误解。</h3><p>React 从来没有说过 “React 比原生操作 DOM 快”。React 的基本思维模式是每次有变动就整个重新渲染整个应用。如果没有 <code>Virtual DOM</code>，简单来想就是直接重置 <code>innerHTML</code>。很多人都没有意识到，在一个大型列表所有数据都变了的情况下，重置 <code>innerHTML</code> 其实是一个还算合理的操作… 真正的问题是在 “全部重新渲染” 的思维模式下，即使只有一行数据变了，它也需要重置整个 <code>innerHTML</code>，这时候显然就有大量的浪费。</p><p>我们可以比较一下 <code>innerHTML</code> vs. <code>Virtual DOM</code> 的重绘性能消耗：</p><ul><li><code>innerHTML</code>:  render html string O(template size) + 重新创建所有 DOM 元素 O(DOM size)</li><li><code>Virtual DOM</code>: render Virtual DOM + diff O(template size) + 必要的 DOM 更新 O(DOM change)</li></ul><p>Virtual DOM render + diff 显然比渲染 html 字符串要慢，但是！它依然是纯 js 层面的计算，比起后面的 DOM 操作来说，依然便宜了太多。可以看到，<code>innerHTML</code> 的总计算量不管是 js 计算还是 DOM 操作都是和整个界面的大小相关，但 <code>Virtual DOM</code> 的计算量里面，只有 js 计算和界面大小相关，DOM 操作是和数据的变动量相关的。前面说了，和 DOM 操作比起来，js 计算是极其便宜的。这才是为什么要有 <code>Virtual DOM</code>：它保证了 1）不管你的数据变化多少，每次重绘的性能都可以接受；2) 你依然可以用类似 <code>innerHTML</code> 的思路去写你的应用。</p><h3 id="3-MVVM-vs-Virtual-DOM"><a href="#3-MVVM-vs-Virtual-DOM" class="headerlink" title="3. MVVM vs. Virtual DOM"></a>3. MVVM vs. Virtual DOM</h3><p>相比起 React，其他 MVVM 系框架比如 Angular, Knockout 以及 Vue、Avalon 采用的都是数据绑定：通过 Directive/Binding 对象，观察数据变化并保留对实际 DOM 元素的引用，当有数据变化时进行对应的操作。MVVM 的变化检查是数据层面的，而 React 的检查是 DOM 结构层面的。MVVM 的性能也根据变动检测的实现原理有所不同：Angular 的脏检查使得任何变动都有固定的 O(watcher count) 的代价；Knockout/Vue/Avalon 都采用了依赖收集，在 js 和 DOM 层面都是 O(change)：</p><ul><li>脏检查：scope digest O(watcher count) + 必要 DOM 更新 O(DOM change)</li><li>依赖收集：重新收集依赖 O(data change) + 必要 DOM 更新 O(DOM change)</li></ul><p>可以看到，Angular 最不效率的地方在于任何小变动都有的和 watcher 数量相关的性能代价。但是！当所有数据都变了的时候，Angular 其实并不吃亏。依赖收集在初始化和数据变化的时候都需要重新收集依赖，这个代价在小量更新的时候几乎可以忽略，但在数据量庞大的时候也会产生一定的消耗。</p><p>MVVM 渲染列表的时候，由于每一行都有自己的数据作用域，所以通常都是每一行有一个对应的 ViewModel 实例，或者是一个稍微轻量一些的利用原型继承的 “scope” 对象，但也有一定的代价。所以，MVVM 列表渲染的初始化几乎一定比 React 慢，因为创建 ViewModel / scope 实例比起 <code>Virtual DOM</code> 来说要昂贵很多。这里所有 MVVM 实现的一个共同问题就是在列表渲染的数据源变动时，尤其是当数据是全新的对象时，如何有效地复用已经创建的 ViewModel 实例和 DOM 元素。假如没有任何复用方面的优化，由于数据是 “全新” 的，MVVM 实际上需要销毁之前的所有实例，重新创建所有实例，最后再进行一次渲染！这就是为什么题目里链接的 angular/knockout 实现都相对比较慢。相比之下，React 的变动检查由于是 DOM 结构层面的，即使是全新的数据，只要最后渲染结果没变，那么就不需要做无用功。</p><p>Angular 和 Vue 都提供了列表重绘的优化机制，也就是 “提示” 框架如何有效地复用实例和 DOM 元素。比如数据库里的同一个对象，在两次前端 API 调用里面会成为不同的对象，但是它们依然有一样的 uid。这时候你就可以提示 track by uid 来让 Angular 知道，这两个对象其实是同一份数据。那么原来这份数据对应的实例和 DOM 元素都可以复用，只需要更新变动了的部分。或者，你也可以直接 track by $index 来进行 “原地复用”：直接根据在数组里的位置进行复用。在题目给出的例子里，如果 angular 实现加上 track by $index 的话，后续重绘是不会比 React 慢多少的。甚至在 dbmonster 测试中，Angular 和 Vue 用了 track by $index 以后都比 React 快。</p><p>顺道说一句，React 渲染列表的时候也需要提供 key 这个特殊 prop，本质上和 track-by 是一回事。</p><h3 id="4-性能比较也要看场合"><a href="#4-性能比较也要看场合" class="headerlink" title="4. 性能比较也要看场合"></a>4. 性能比较也要看场合</h3><p>在比较性能的时候，要分清楚初始渲染、小量数据更新、大量数据更新这些不同的场合。Virtual DOM、脏检查 MVVM、数据收集 MVVM 在不同场合各有不同的表现和不同的优化需求。<code>Virtual DOM</code> 为了提升小量数据更新时的性能，也需要针对性的优化，比如 shouldComponentUpdate 或是 immutable data。</p><ul><li>初始渲染：Virtual DOM &gt; 脏检查 &gt;= 依赖收集</li><li>小量数据更新：依赖收集 &gt;&gt; Virtual DOM + 优化 &gt; 脏检查（无法优化） &gt; Virtual DOM 无优化</li><li>大量数据更新：脏检查 + 优化 &gt;= 依赖收集 + 优化 &gt; Virtual DOM（无法/无需优化）&gt;&gt; MVVM 无优化</li></ul><p>不要天真地以为 <code>Virtual DOM</code> 就是快，diff 不是免费的，batching 么 MVVM 也能做，而且最终 patch 的时候还不是要用原生 API。在我看来 <code>Virtual DOM</code> 真正的价值从来都不是性能，而是它</p><ol><li>为函数式的 UI 编程方式打开了大门；</li><li>可以渲染到 DOM 以外的 backend，比如 ReactNative。</li></ol><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>以上这些比较，更多的是对于框架开发研究者提供一些参考。主流的框架 + 合理的优化，足以应对绝大部分应用的性能需求。如果是对性能有极致需求的特殊情况，其实应该牺牲一些可维护性采取手动优化：比如 Atom 编辑器在文件渲染的实现上放弃了 React 而采用了自己实现的 tile-based rendering；又比如在移动端需要 DOM-pooling 的虚拟滚动，不需要考虑顺序变化，可以绕过框架的内置实现自己搞一个。</p><blockquote><p>转载信息<br>作者：尤雨溪<br>链接：<a href="https://www.zhihu.com/question/31809713/answer/53544875" target="_blank" rel="noopener">https://www.zhihu.com/question/31809713/answer/53544875</a><br>来源：知乎</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-原生-DOM-操作-vs-通过框架封装操作。&quot;&gt;&lt;a href=&quot;#1-原生-DOM-操作-vs-通过框架封装操作。&quot; class=&quot;headerlink&quot; title=&quot;1. 原生 DOM 操作 vs. 通过框架封装操作。&quot;&gt;&lt;/a&gt;1. 原生 DOM 操作 vs. 通过框架封装操作。&lt;/h3&gt;&lt;p&gt;这是一个&lt;code&gt;性能&lt;/code&gt; vs. &lt;code&gt;可维护性&lt;/code&gt;的取舍。框架的意义在于为你掩盖底层的 DOM 操作，让你用更声明式的方式来描述你的目的，从而让你的代码更容易维护。没有任何框架可以比纯手动的优化 DOM 操作更快，因为框架的 DOM 操作层需要应对任何上层 API 可能产生的操作，它的实现必须是普适的。针对任何一个 benchmark，我都可以写出比任何框架更快的手动优化，但是那有什么意义呢？在构建一个实际应用的时候，你难道为每一个地方都去做手动优化吗？出于可维护性的考虑，这显然不可能。框架给你的保证是，你在不需要手动优化的情况下，我依然可以给你提供过得去的性能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://tomatoro.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>用优雅的方式进行数组去重</title>
    <link href="http://tomatoro.cn/archives/9c7dd70f.html"/>
    <id>http://tomatoro.cn/archives/9c7dd70f.html</id>
    <published>2019-08-22T16:47:59.000Z</published>
    <updated>2023-05-24T02:47:33.046Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>想必,数组去重已经是一个老生常谈的问题了, 到现在为止我们要考虑的并不是怎么去实现一个数组去重, 而更应该关注,怎样使用一段更短的代码, 更优雅, 更简洁的达到我们想要的效果.</p></blockquote><a id="more"></a><h3 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h3><blockquote><p>我们这里直接列出三种比较优雅的数组去重的方法,在后面对每个进行详细的解析</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'咩'</span>, <span class="number">1</span>, <span class="string">'Super Ball'</span>, <span class="string">'咩'</span>, <span class="string">'咩'</span>, <span class="string">'Super Ball'</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bySet = [...new <span class="built_in">Set</span>(originalArray)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> byFilter = originalArray.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> originalArray.indexOf(item) === index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> byReduce = originalArray.reduce(<span class="function">(<span class="params">unique, item</span>) =&gt;</span> unique.includes(item) ? unique : [...unique, item], [])</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>先让我们来看看 <code>Set</code> 到底是个啥</p><blockquote><p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。<br><cite><a href="https://developer.mozilla.org" target="_blank" rel="noopener">https://developer.mozilla.org</a>…</cite></p></blockquote><p>首先， <code>Set</code> 中只允许出现唯一值<br>唯一性是比对原始值或者对象引用</p><p><code>const bySet = [...new Set(originalArray)]</code>这一段的操作，我们将它拆分来看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'咩'</span>, <span class="number">1</span>, <span class="string">'Super Ball'</span>, <span class="string">'咩'</span>, <span class="string">'咩'</span>, <span class="string">'Super Ball'</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> uniqueSet = <span class="keyword">new</span> <span class="built_in">Set</span>(originalArray)</span><br><span class="line"><span class="comment">// 得到 Set(5) [ 1, 2, "咩", "Super Ball", 4 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bySet = [...uniqueSet]</span><br><span class="line"><span class="comment">// 得到 Array(5) [ 1, 2, "咩", "Super Ball", 4 ]</span></span><br></pre></td></tr></table></figure><p>在将 <code>Set</code> 转为 <code>Array</code> 时，也可以使用 <code>Array.from(set)</code>。</p><h3 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter"></a>Array.prototype.filter</h3><p>要理解 <code>filter</code> 方法为什么可以去重，需要关注一下另一个方法 <code>indexOf</code></p><blockquote><p>indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1。<br><cite><a href="https://developer.mozilla.org" target="_blank" rel="noopener">https://developer.mozilla.org</a>…</cite></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beasts = [<span class="string">'ant'</span>, <span class="string">'bison'</span>, <span class="string">'camel'</span>, <span class="string">'duck'</span>, <span class="string">'bison'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(beasts.indexOf(<span class="string">'bison'</span>));</span><br><span class="line"><span class="comment">// expected output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start from index 2</span></span><br><span class="line"><span class="built_in">console</span>.log(beasts.indexOf(<span class="string">'bison'</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: 4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(beasts.indexOf(<span class="string">'giraffe'</span>));</span><br><span class="line"><span class="comment">// expected output: -1</span></span><br></pre></td></tr></table></figure><blockquote><p>filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。<br><cite><a href="https://developer.mozilla.org" target="_blank" rel="noopener">https://developer.mozilla.org</a>…</cite></p></blockquote><p><code>filter</code> 方法接受两个参数：</p><ol><li>第一个参数：一个回调函数， <code>filter</code> 会将数据中的每一项都传递给该函数，若该函数返回 真值，则数据保存，返回 假值，则数据将不会出现在新生成的数据中</li><li>第二个参数：回调函数中 <code>this</code> 的指向</li></ol><p>我们将上面的去重方法按下面这样重写一下，就可以看清整个 <code>filter</code> 的执行过程了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'咩'</span>, <span class="number">1</span>, <span class="string">'Super Ball'</span>, <span class="string">'咩'</span>, <span class="string">'咩'</span>, <span class="string">'Super Ball'</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> table = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> byFilter = originalArray.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果找到的索引与当前索引一致，则保留该值</span></span><br><span class="line">  <span class="keyword">const</span> shouldKeep = originalArray.indexOf(item) === index</span><br><span class="line">  table.push(&#123;</span><br><span class="line">    序号: index,</span><br><span class="line">    值: item,</span><br><span class="line">    是否应该保留: shouldKeep ? <span class="string">'保留'</span> : <span class="string">'删除'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> shouldKeep</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(byFilter)</span><br><span class="line"><span class="built_in">console</span>.table(table)</span><br></pre></td></tr></table></figure><table><thead><tr><th>序号</th><th>值</th><th>是否应该保留</th><th>出现</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>保留</td><td>第一次出现</td></tr><tr><td>1</td><td>2</td><td>保留</td><td>第一次出现</td></tr><tr><td>2</td><td>咩</td><td>保存</td><td>第一次出现</td></tr><tr><td>3</td><td>1</td><td>删除</td><td>第二次出现</td></tr><tr><td>4</td><td>Super Ball</td><td>保留</td><td>第一次出现</td></tr><tr><td>5</td><td>咩</td><td>删除</td><td>第二次出现</td></tr><tr><td>6</td><td>咩</td><td>删除</td><td>第三次出现</td></tr><tr><td>7</td><td>Super Ball</td><td>删除</td><td>第二次出现</td></tr><tr><td>8</td><td>4</td><td>保留</td><td>第一次出现</td></tr></tbody></table><h3 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce"></a>Array.prototype.reduce</h3><blockquote><p>reduce() 方法对数组中的每个元素执行一个由您提供的 reducer 函数(升序执行)，将其结果汇总为单个返回值。<br><cite><a href="https://developer.mozilla.org" target="_blank" rel="noopener">https://developer.mozilla.org</a>…</cite></p></blockquote><p><code>Array.prototype.reduce</code> 方法接受两个参数：</p><ul><li><p><code>Callback</code>：回调函数，它可以接收四个参数</p></li><li><p><code>Accumulator</code>：累计器，这个其实是让很多人忽略的一点，就是，累计器其实可以是任何类型的数据</p><ul><li><code>Current Value</code>：当前值</li><li><code>Current Index</code>：当前值的索引</li><li><code>Source Array</code>：源数组</li><li><code>Initial Value</code>：累计器的初始值，就跟累计器一样，这个参数也总是被绝大多数人忽略</li></ul></li></ul><p>就像 filter 章节一样，我们来看看 reduce 的执行过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'咩'</span>, <span class="number">1</span>, <span class="string">'Super Ball'</span>, <span class="string">'咩'</span>, <span class="string">'咩'</span>, <span class="string">'Super Ball'</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> byReduce = originalArray.reduce(<span class="function">(<span class="params">unique, item, index, source</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> exist = unique.includes(item)</span><br><span class="line">  <span class="keyword">const</span> next = unique.includes(item) ? unique : [...unique, item]</span><br><span class="line">  <span class="built_in">console</span>.group(<span class="string">`遍历第 <span class="subst">$&#123;index&#125;</span> 个值`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'当前累计器：'</span>, unique)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'当前值：'</span>, item)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'是否已添加进累计器？'</span>, exist)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'新值'</span>, next)</span><br><span class="line">  <span class="built_in">console</span>.groupEnd()</span><br><span class="line">  <span class="keyword">return</span> next</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;想必,数组去重已经是一个老生常谈的问题了, 到现在为止我们要考虑的并不是怎么去实现一个数组去重, 而更应该关注,怎样使用一段更短的代码, 更优雅, 更简洁的达到我们想要的效果.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="http://tomatoro.cn/tags/ES6/"/>
    
      <category term="JavaScript" scheme="http://tomatoro.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>如何在一台设备上同时配置github和gitlab的SSH</title>
    <link href="http://tomatoro.cn/archives/d97dbbe6.html"/>
    <id>http://tomatoro.cn/archives/d97dbbe6.html</id>
    <published>2019-08-06T16:05:22.000Z</published>
    <updated>2023-05-24T02:47:33.046Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>在工作中，很有可能遇到这样的情况：公司用gitlab搭建了一个仓库，自己平常使用github来存储自己的代码。这样就造成在只设置了公司的gitlab SSH的时候，clone自己github仓库代码时，只能使用HTTPS的方式clone，很不方便。所以这篇文章会教会你同时在一台电脑上配置两个SSH，以方便自己在工作和个人空间上的快速切换，提高效率。</p></blockquote><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>首先，要找到位于用户下的<code>.ssh</code>文件，直接：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~<span class="regexp">/.ssh</span></span><br></pre></td></tr></table></figure><p>然后, 需要设置全局的<code>name</code>和<code>email</code>(这里注意,哪个常用设置哪个,我是公司常用,就设置的公司的)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">'xxx'</span></span><br><span class="line">git config --global user.email <span class="string">'xxx@baijia.com'</span></span><br></pre></td></tr></table></figure><p>接下来, 开始生成秘钥文件. 这里直接两个都生成一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">'xxx@bai'</span>jia.com<span class="string">' // GitLab</span></span><br><span class="line"><span class="string">// Enter file in which to save the key (/Users/tomatoro/.ssh/id_rsa): id_rsa_gitlab</span></span><br><span class="line"><span class="string">ssh-keygen -t rsa -C '</span>tomatoro@<span class="number">163.</span>com<span class="string">' // GitHub</span></span><br><span class="line"><span class="string">// Enter file in which to save the key (/Users/tomatoro/.ssh/id_rsa): id_rsa_github</span></span><br></pre></td></tr></table></figure><p>进入到<code>.ssh</code>文件下,找到<code>id_rsa_gitlab.pub</code>和<code>id_rsa_github.pub</code> 将里面的内容全部复制粘贴到<code>github</code> 和 <code>gitlab</code> 的<code>SSHKEY</code>上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa_gitlab.pub</span><br><span class="line">cat id_rsa_github.pub</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g884j9tshmj30fi0wck24.jpg" width="200px"><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g884jetao4j31lq0o0h96.jpg" alt="image.png"></p><blockquote><p>这里名字随便起, 然后记得.pub文件里内容全部复制就好了. 完了之后点保存. gitlab同理.</p></blockquote><p>接下来就要将两个key在本地存储起来<br>打开<code>agent</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-agent -s</span><br><span class="line">ssh-add ~<span class="regexp">/.ssh/i</span>d_rsa_github <span class="comment">// 输入生成秘钥时设置的密码</span></span><br><span class="line">ssh-add ~<span class="regexp">/.ssh/i</span>d_rsa_gitlab <span class="comment">// 输入生成秘钥时设置的密码</span></span><br></pre></td></tr></table></figure><p>然后需要一个<code>config文件</code>来管理这两个key,以让git知道分配给谁<br>在<code>.ssh</code>目录下创建<code>config文件</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch ~<span class="regexp">/.ssh/</span>config</span><br></pre></td></tr></table></figure><p>打开<code>config</code>编辑如下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Host github.com <span class="comment">// 不动</span></span><br><span class="line">    HostName github.com <span class="comment">// 不动</span></span><br><span class="line">    User tomatoro@<span class="number">163.</span>com <span class="comment">// 你自己的github邮箱</span></span><br><span class="line">    PreferredAuthentications publickey <span class="comment">// 不动</span></span><br><span class="line">    IdentityFile ~<span class="regexp">/.ssh/i</span>d_rsa_github <span class="comment">// 不动</span></span><br><span class="line">    Port <span class="number">443</span> </span><br><span class="line">    <span class="comment">// 如果ssh -T git@github.com的时候报 ssh: connect to host github.com port 22: Operation timed out就把Port这条加上吧,这个坑坑了我好久!!</span></span><br><span class="line"></span><br><span class="line">Host <span class="number">192.168</span><span class="number">.0</span><span class="number">.231</span> <span class="comment">// 你们公司gitlab的ip地址</span></span><br><span class="line">    HostName <span class="number">192.168</span><span class="number">.0</span><span class="number">.231</span> <span class="comment">//与Host保持一致</span></span><br><span class="line">    User xxx@baijia.com <span class="comment">// 你gitlab的邮箱</span></span><br><span class="line">    IdentityFile ~<span class="regexp">/.ssh/i</span>d_rsa_gitlab <span class="comment">// 不动</span></span><br><span class="line">    Port <span class="number">64222</span> <span class="comment">// 你们公司gitlab的ip端口 没有的话可以不写</span></span><br></pre></td></tr></table></figure><p>好了,到了这一步,设置就基本全部完成了,接下来只需要跟远端的<code>SSH</code>同步一下就OK了</p><blockquote><p>公司仓库下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@<span class="number">192.168</span><span class="number">.0</span><span class="number">.231</span></span><br><span class="line">输入密码</span><br><span class="line">git clone ssh:<span class="comment">//git@192.168.0.231:64222/MLE/skillCenter.git</span></span><br></pre></td></tr></table></figure><blockquote><p>个人仓库下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment">// --local需要在有git仓库的情况下才可以执行</span></span><br><span class="line">git config —local user.name <span class="string">'tomatoro'</span></span><br><span class="line">git config —local user.email <span class="string">'tomatoro@163.com'</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line">输入密码</span><br><span class="line">git clone ssh:<span class="comment">//git@github.com:443/Tomatoro/TypeScript-study.git</span></span><br></pre></td></tr></table></figure><blockquote><p>整个流程下来就是这个样子</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqb16ynad2j30wb0u0k8u.jpg" alt="image.png"><br><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqb185dlwtj31a00o07kk.jpg" alt="image.png"></p><p>至此,就全部结束了. 想想我在搞这个东西的时候遇到的坑,现在都觉得好恶心. 整整弄了一下午, 希望对后来者有些许帮助吧.<br>全部原创,欢迎转载!转载请注明出处.谢谢!</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在工作中，很有可能遇到这样的情况：公司用gitlab搭建了一个仓库，自己平常使用github来存储自己的代码。这样就造成在只设置了公司的gitlab SSH的时候，clone自己github仓库代码时，只能使用HTTPS的方式clone，很不方便。所以这篇文章会教会你同时在一台电脑上配置两个SSH，以方便自己在工作和个人空间上的快速切换，提高效率。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="http://tomatoro.cn/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>如何将个人博客同时部署到GitHub和Coding上</title>
    <link href="http://tomatoro.cn/archives/3de92cb5.html"/>
    <id>http://tomatoro.cn/archives/3de92cb5.html</id>
    <published>2019-08-05T11:46:32.000Z</published>
    <updated>2023-05-24T02:47:33.046Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>之前我们把hexo托管在github，但是毕竟github是国外的，访问速度上还是有点慢，所以想也部署一套在国内的托管平台，下面给大家推荐一个国内代码托管的平台Coding。</p></blockquote><h3 id="可以学到什么"><a href="#可以学到什么" class="headerlink" title="可以学到什么"></a>可以学到什么</h3><blockquote><p>通过这篇文章，我们可以将我们的个人博客同时部署在国内和国外两个节点上。这样，如果是国内访问博客，会自动采用国内的节点，实现快速访问。如果是国外访问博客，便会采用国外的节点，以保证连接的可实现。</p></blockquote><a id="more"></a> <h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="config-yml配置"><a href="#config-yml配置" class="headerlink" title="_config.yml配置"></a>_config.yml配置</h3><hr><p>想要同时部署到2个平台，就要修改博客根目录下面的<code>_config.yml</code>文件中的<code>deploy</code>如下<br>根据<code>Hexo官方文档</code>需要修改成下面的形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: <span class="xml"><span class="tag">&lt;<span class="name">repository</span> <span class="attr">url</span>&gt;</span></span></span><br><span class="line">    coding: &lt;repository url&gt;</span><br><span class="line">    branch: [branch]</span><br></pre></td></tr></table></figure><p>比如我这样<br><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g884gjg1q8j30uq07m0z5.jpg" alt="_config.yml.png"></p><p>我这边提交采用的SSH密钥，这个方法有个好处，提交的时候不用输入用户名和密码。如果你习惯用http的方式，只要将地址改成相应的http地址即可。</p><h3 id="coding上创建一个新项目"><a href="#coding上创建一个新项目" class="headerlink" title="coding上创建一个新项目"></a>coding上创建一个新项目</h3><hr><p>这里只介绍coding上面如何创建项目，以及把本地hexo部署到coding上面，还不懂如何创建hexo的请看我之前的系类文章。首先我们创建一个项目，创建后进入项目的代码模块，获取到这个项目的ssh地址</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g884gm1ziwj31go0u0k9s.jpg" alt="image"></p><h3 id="同步本地hexo到coding上"><a href="#同步本地hexo到coding上" class="headerlink" title="同步本地hexo到coding上"></a>同步本地hexo到coding上</h3><hr><p>把获取到了ssh配置在上面的<code>_config.yml</code>文件中的<code>deploy</code>下，本地打开 <code>id_rsa.pub</code> 文件，复制其中全部内容，填写到<code>SSH_RSA公钥</code>key下的一栏，公钥名称可以随意起名字。完成后点击“添加”，然后输入密码或动态码即可添加完成。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g884unl6s2j31g80q64qp.jpg" alt="tomatoro.cn"></p><p>添加后，在<code>git bash</code>命令输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure><p>如果得到下面提示就表示公钥添加成功了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Coding.net Tips : [Hello ! You&apos;ve conected to Coding.net by SSH successfully! ]</span><br></pre></td></tr></table></figure><p>最后使用部署命令就能把博客同步到coding上面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g884gpwjeej31zy0u0e6o.jpg" alt="tomatoro.cn"></p><h3 id="pages服务方式部署"><a href="#pages服务方式部署" class="headerlink" title="pages服务方式部署"></a>pages服务方式部署</h3><hr><p>部署博客方式有两种，第一种就是pages服务的方式，也推荐这种方式，因为可以绑定域名，而第二种演示的方式必须升级会员才能绑定自定义域名。pages方式也很简单</p><p>分支选择master，因为前面配置的分支是master,因此开启之后，也需要是master。然后看起之后就可访问了。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g884usvekgj31vo0u0tuz.jpg" alt="tomatoro.cn"></p><p><strong>注意</strong>：</p><blockquote><ol><li>如果你的项目名称跟你<code>coding</code>的用户名一样，比如我的用户是叫<code>tengj</code>,博客项目名也叫<code>tengj</code> 那直接访问 <code>tengj.coding.me</code>就能访问博客，否则就要带上项目名：<code>tengj.coding.me/项目名</code> 才能访问推荐项目名跟用户名一样，这样就可以省略项目名了</li><li>这里需要将自定义域名填上你自己的域名就可以了</li><li><code>SSL/TLS安全证书</code>这里有个坑,就是如果你之前已经创建绑定过github的代码仓库,那么直接生成这个证书是生成不了的,他会显示失败的状态,需要过30分钟才可以再次申请。 所以到这一步的小伙伴，可以先把这一步空下来，继续网下看，会告诉该怎么操作才正确。</li></ol></blockquote><h3 id="个人域名绑定"><a href="#个人域名绑定" class="headerlink" title="个人域名绑定"></a>个人域名绑定</h3><hr><p>我是在阿里上买的tomatoro.cn的这个域名，现在要实现国内的走coding，海外的走github，只要配置2个CNAME就行。域名解析如下：<br><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g884gtkii2j310q0ne45d.jpg" alt="tomatoro.cn"><br><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g884gykdjbj310m0nowlf.jpg" alt="tomatoro.cn"><br><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g884wv3630j327i0ae10h.jpg" alt="tomatoro.cn"></p><blockquote><p><strong>注意</strong>：<br>这里就说一下如果之前有设置过github的域名解析, 现在要再绑定一个coding的域名解析, 需要注意的点:<br>在coding去申请 <code>SSL/TLS安全证书</code>之前,需要将图中框起来的两个域名先暂停, 然后, 我们再去申请 <code>SSL/TLS安全证书</code>, 一般只需要等几秒就成功了, 然后再把这两个域名解析驱动就可以了. 一定要注意啊, 我就是因为这个等了半个小时才能接着申请的.</p></blockquote><p>过几分钟后检测<code>tomatoro.cn</code>看到的解析是正确的，国内解析到Coding，国外解析到Github，如图：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g884hcq1f3j315k0u0kjl.jpg" alt="tomatoro.cn"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><p>到此为止，终于可以实现部署一次，<code>github</code>和<code>coding</code>两个同步都搞定了。访问速度也是唰唰唰的快，希望对还在搭建hexo独立博客的小伙伴有帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;之前我们把hexo托管在github，但是毕竟github是国外的，访问速度上还是有点慢，所以想也部署一套在国内的托管平台，下面给大家推荐一个国内代码托管的平台Coding。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;可以学到什么&quot;&gt;&lt;a href=&quot;#可以学到什么&quot; class=&quot;headerlink&quot; title=&quot;可以学到什么&quot;&gt;&lt;/a&gt;可以学到什么&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过这篇文章，我们可以将我们的个人博客同时部署在国内和国外两个节点上。这样，如果是国内访问博客，会自动采用国内的节点，实现快速访问。如果是国外访问博客，便会采用国外的节点，以保证连接的可实现。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Blog" scheme="http://tomatoro.cn/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建属于自己的博客</title>
    <link href="http://tomatoro.cn/archives/d2ee919b.html"/>
    <id>http://tomatoro.cn/archives/d2ee919b.html</id>
    <published>2019-08-02T17:45:30.000Z</published>
    <updated>2023-05-24T02:47:33.046Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Blog" scheme="http://tomatoro.cn/tags/Blog/"/>
    
  </entry>
  
</feed>
